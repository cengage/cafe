# Copyright 2019 Cengage Learning, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# End license text.

AWSTemplateFormatVersion: '2010-09-09'
Description: Set up API Gateway backed by S3 storage piped through Firehose

Parameters:
  stageName:
    Type: "String"
    Default: "dev"
    Description: "Name of the stage being deployed"

  apiLogLevel:
    Type: "String"
    Default: "ERROR"
    Description: "Level of CloudWatch logging for API calls (OFF INFO ERROR)"

  bucketName:
    Type: "String"
    Default: "cafebucket"
    Description: "Name of the bucket to store the event files"

  logBucketName:
    Type: "String"
    Default: "cafebucket-logs"
    Description: "Name of the bucket to store the event files"

  firehoseBufferSize:
    Type: "Number"
    Default: 5
    Description: "Size (in MB) of firehose internal cache before writing to S3"

  firehoseBufferTimeout:
    Type: "Number"
    Default: 900
    Description: "Time (in sec) before firehose internal cache is written to S3"

Outputs:
  cafeUrl:
    Description: URL of the CAFe API Gateway
    Value: !Sub "https://${cafeApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${stageName}/"
    Export:
      Name: !Sub "${AWS::StackName}-cafeUrl"

  cafeApiKeyId:
    Description: Id of the API Key for accessing API Gateway
    Value: !Ref cafeApiKey
    Export:
      Name: !Sub "${AWS::StackName}-cafeApiKey"

Resources:

  cafeCloudwatchPolicy:
    DependsOn:
      - "cafeCloudwatchRole"
      - "cafeApi"
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cafeCloudwatchPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:PutLogEvents"
              - "logs:GetLogEvents"
              - "logs:FilterLogEvents"
            Resource: "*"
      Roles:
        - !Ref cafeCloudwatchRole

  cafeFirehoseToCloudwatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cafeFirehoseToCloudwatchPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "logs:CreateLogStream"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:FilterLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:cafe-firehose"
          - Effect: "Allow"
            Action:
              - "logs:PutLogEvents"
              - "logs:GetLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:cafe-firehose:log-stream:activity"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:cafe-firehose:log-stream:log"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:cafe-firehose:log-stream:profile"
      Roles:
        - !Ref cafeFirehoseRole

  cafeApiAccountConfig:
    DependsOn:
      - "cafeApi"
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "cafeCloudwatchRole.Arn"

  cafeCloudwatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub "apigateway.${AWS::URLSuffix}"
            Action: "sts:AssumeRole"
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: "cafeCloudwatchRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::${AWS::Partition}:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  cafeFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "cafe-firehose"
      RetentionInDays: 3

  cafeFirehoseActivityLogStream:
    DependsOn:
      - "cafeFirehoseLogGroup"
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: "cafe-firehose"
      LogStreamName: "activity"

  cafeFirehoseLogLogStream:
    DependsOn:
      - "cafeFirehoseLogGroup"
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: "cafe-firehose"
      LogStreamName: "log"

  cafeFirehoseProfileLogStream:
    DependsOn:
      - "cafeFirehoseLogGroup"
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: "cafe-firehose"
      LogStreamName: "profile"

  cafeFirehoseToS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cafeFirehoseToS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !GetAtt cafeBucket.Arn
              - !Join
                - "/"
                - - !GetAtt cafeBucket.Arn
                  - "*"
          - Effect: "Allow"
            Action:
              - "kinesis:DescribeStream"
              - "kinesis:GetShardIterator"
              - "kinesis:GetRecords"
            Resource:
              - !Sub "arn:${AWS::Partition}:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*"
          - Effect: "Allow"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: !GetAtt cafeBucketKey.Arn
            Condition:
              StringEquals:
                "kms:ViaService": !Sub "s3.${AWS::Region}.${AWS::URLSuffix}"
              StringLike:
                # NOTE, there's no good solution for substitution into a key-name for
                # resolving the AWS partition names (aws-cn or aws-us-gov)
                "kms:EncryptionContext:aws:s3:arn": !Join
                  - "/"
                  - - !GetAtt cafeBucket.Arn
                    - "data*"
#                "kms:EncryptionContext:aws:s3:arn": !Sub "arn:${AWS::Partition}:s3:::${bucketName}/data*"
#          - Effect: "Allow"
#            Action:
#              - "lambda:InvokeFunction"
#              - "lambda:GetFunctionConfiguration"
#            Resource: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:function-name-function-version"
      Roles:
        - !Ref cafeFirehoseRole

  cafeApiGatewayToFirehosePolicy:
    DependsOn:
      - "cafeApiGatewayRole"
      - "cafeActivityFirehose"
      - "cafeLogFirehose"
      - "cafeProfileFirehose"
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cafeApiGatewayToFirehosePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "firehose:DeleteDeliveryStream"
              - "firehose:PutRecord"
              - "firehose:PutRecordBatch"
              - "firehose:UpdateDestination"
            Resource:
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-activity"
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-log"
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-profile"
      Roles:
        - !Ref cafeApiGatewayRole


  cafeFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub "firehose.${AWS::URLSuffix}"
            Action: "sts:AssumeRole"
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: "cafeFirehoseRole"

  cafeApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub "apigateway.${AWS::URLSuffix}"
            Action: "sts:AssumeRole"
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: "cafeApiGatewayRole"


  cafeFirehoseMgmtPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cafeMgmt-firehose
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:*
            Resource:
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-activity"
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-log"
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-profile"
#              - !GetAtt cafeActivityFirehose.Arn
#              - !GetAtt cafeProfileFirehose.Arn
#              - !GetAtt cafeLogFirehose.Arn
          - Effect: Deny
            Action:
              - sqs:*
            NotResource:
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-activity"
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-log"
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/cafe-profile"
#              - !GetAtt cafeActivityFirehose.Arn
#              - !GetAtt cafeProfileFirehose.Arn
#              - !GetAtt cafeLogFirehose.Arn
      Roles:
        - !Ref cafeFirehoseMgmtRole

  cafeFirehoseMgmtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub "firehose.${AWS::URLSuffix}"
            Action: "sts:AssumeRole"
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: "cafeFirehoseMgmtRole"

  cafeS3MgmtPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cafeMgmt-bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Join
                - "/"
                - - !GetAtt cafeBucket.Arn
                  - "data*"
              - !Join
                - "/"
                - - !GetAtt cafeLogBucket.Arn
                  - "logs*"
          - Effect: Deny
            Action:
              - s3:*
            NotResource:
              - !Join
                - "/"
                - - !GetAtt cafeBucket.Arn
                  - "data*"
              - !Join
                - "/"
                - - !GetAtt cafeLogBucket.Arn
                  - "logs*"
#              - !GetAtt cafeBucket.Arn
      Roles:
        - !Ref cafeS3MgmtRole

  cafeS3MgmtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub "firehose.${AWS::URLSuffix}"
            Action: "sts:AssumeRole"
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: "cafeS3MgmtRole"


  cafeApiGatewayMgmtPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cafeMgmt-apigateway
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - apigateway:*
            Resource:
              - !Join
                - ''
                - - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:${AWS::AccountId}:'
                  - !Ref cafeApi
          - Effect: Deny
            Action:
              - apigateway:*
            NotResource:
              - !Join
                - ''
                - - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:${AWS::AccountId}:'
                  - !Ref cafeApi
      Users:
        - !Ref cafeMgmtUser

  cafeMgmtUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: "1@3$5^abcDEF"
        PasswordResetRequired: true
      Path: "/"
#      PermissionsBoundary: String
      UserName: cafeManager

  cafeReportUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: "1@3$5^abcDEF"
        PasswordResetRequired: true
      Path: "/"
#      PermissionsBoundary: String
      UserName: cafeBucketReporter

  cafeMgmtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
      MaxSessionDuration: 3600
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"
      RoleName: "cafeMgmtRole"


  cafeBucketKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "CAFe S3 bucket encryption"
      Enabled: true
      EnableKeyRotation: false
      KeyUsage: "ENCRYPT_DECRYPT"
      KeyPolicy:
        Version: "2012-10-17"
        Id: "key-consolepolicy"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow access for Key Administrators"
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt cafeMgmtUser.Arn
            Action:
              - "kms:Describe*"
              - "kms:List*"
            Resource: "*"
          - Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt cafeMgmtUser.Arn
                - !GetAtt cafeReportUser.Arn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow attachment of persistent resources"
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt cafeMgmtUser.Arn
            Action:
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: "*"
            Condition:
              Bool:
                kms:GrantIsForAWSResource: "true"
      Tags:
        - Key: env
          Value: dev
        - Key: system
          Value: cafe

  cafeActivityFirehose:
    DependsOn:
      - "cafeFirehoseActivityLogStream"
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: cafe-activity
      DeliveryStreamType: "DirectPut"
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt cafeFirehoseRole.Arn
        BucketARN: !GetAtt cafeBucket.Arn
        Prefix: "data/activity/"
        BufferingHints:
          SizeInMBs: !Ref firehoseBufferSize
          IntervalInSeconds: !Ref firehoseBufferTimeout
        CompressionFormat: "UNCOMPRESSED"
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt cafeBucketKey.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "cafe-firehose"
          LogStreamName: "activity"
        S3BackupMode: "Disabled"

  cafeLogFirehose:
    DependsOn:
      - "cafeFirehoseLogLogStream"
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: cafe-log
      DeliveryStreamType: "DirectPut"
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt cafeFirehoseRole.Arn
        BucketARN: !GetAtt cafeBucket.Arn
        Prefix: "data/log/"
        BufferingHints:
          SizeInMBs: !Ref firehoseBufferSize
          IntervalInSeconds: !Ref firehoseBufferTimeout
        CompressionFormat: "UNCOMPRESSED"
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt cafeBucketKey.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "cafe-firehose"
          LogStreamName: "log"
        S3BackupMode: "Disabled"

  cafeProfileFirehose:
    DependsOn:
      - "cafeFirehoseProfileLogStream"
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: cafe-profile
      DeliveryStreamType: "DirectPut"
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt cafeFirehoseRole.Arn
        BucketARN: !GetAtt cafeBucket.Arn
        Prefix: "data/profile/"
        BufferingHints:
          SizeInMBs: !Ref firehoseBufferSize
          IntervalInSeconds: !Ref firehoseBufferTimeout
        CompressionFormat: "UNCOMPRESSED"
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt cafeBucketKey.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "cafe-firehose"
          LogStreamName: "profile"
        S3BackupMode: "Disabled"

# For notifying on S3 Bucket events
# eventually to trigger lambda to populate DynamoDB
#  cafeS3Notification:
#    Type: AWS::SNS::Topic
#    Properties:
#      DisplayName: Cafe Activity Topic
#      KmsMasterKeyId: !Ref cafeBucketKey
#      TopicName: cafe-s3-notification

  cafeLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccelerateConfiguration:
        AccelerationStatus: "Suspended"
      AccessControl: "LogDeliveryWrite"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      BucketName: !Sub "${logBucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Prefix: "logs/"
            Status: "Enabled"
#      MetricsConfigurations:
#        - Id: "dataMetrics"
#          Prefix: "logs/"
#          TagFilters:
#            - Key: env
#              Value: dev
#      ObjectLockConfiguration:
#        ObjectLockEnabled: ""
#        Rule:
#          DefaultRetention:
#            Days: 30
#            Mode: "COMPLIANCE"
#      ObjectLockEnabled: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: env
          Value: dev
      VersioningConfiguration:
        Status: "Suspended"

  cafeBucket:
    DependsOn:
      - "cafeLogBucket"
      - "cafeBucketKey"
    Type: AWS::S3::Bucket
    Properties:
      AccelerateConfiguration:
        AccelerationStatus: "Suspended"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !Ref cafeBucketKey
      BucketName: !Sub "${bucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Prefix: "data/profile/"
            Status: "Enabled"
          - ExpirationInDays: 30
            Prefix: "data/activity/"
            Status: "Enabled"
          - ExpirationInDays: 30
            Prefix: "data/log/"
            Status: "Enabled"
          - ExpirationInDays: 30
            Prefix: "data/"
            Status: "Enabled"
      LoggingConfiguration:
        DestinationBucketName: !Ref cafeLogBucket
        LogFilePrefix: "logs/"
      MetricsConfigurations:
        - Id: "dataMetrics"
          Prefix: "data/"
          TagFilters:
            - Key: env
              Value: dev
#      NotificationConfiguration:
#        TopicConfigurations:
#          - Event: "s3:ObjectCreated:Put"
#            Topic: !Ref cafeS3Notification
#            Filter:
#              S3Key:
#                Rules:
## Eventually we probably want to notify individually
##                  - Name: "Prefix"
##                    Value: "data/activity/"
##                  - Name: "Prefix"
##                    Value: "data/log/"
##                  - Name: "Prefix"
##                    Value: "data/profile/"
#                  - Name: "Prefix"
#                    Value: "data/"
# Something causes this to be an issue
#      ObjectLockConfiguration:
#        ObjectLockEnabled: "Enabled"
#        Rule:
#          DefaultRetention:
#            Days: 30
#            Mode: "COMPLIANCE"
#      ObjectLockEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: env
          Value: dev
      VersioningConfiguration:
        Status: "Suspended"

  cafeUsagePlan:
    DependsOn:
      - "cafeApi"
      - "cafeStage"
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref cafeApi
          Stage: !Ref cafeStage
      Description: CAFe Usage plan for specific stage(s)
      Quota:
        Limit: 1000
        Offset: 0
        Period: "DAY"
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: cafeUsagePlan

  cafeStage:
    DependsOn:
      - "cafeDeployment"
      - "cafeApi"
    Type: AWS::ApiGateway::Stage
    Properties:
#      AccessLogSetting:
#        AccessLogSetting
      CacheClusterEnabled: false
#      CacheClusterSize: String
#      CanarySetting:
#        CanarySetting
#      ClientCertificateId: String
      DeploymentId: !Ref cafeDeployment
      Description: Testing stage for CAFe API Gateway
      MethodSettings:
        - ResourcePath: "/activity"
          HttpMethod: "POST"
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: !Ref apiLogLevel
        - ResourcePath: "/schema/activity"
          HttpMethod: "GET"
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: !Ref apiLogLevel
      RestApiId: !Ref cafeApi
      StageName: !Ref stageName

  cafeApiKey:
    DependsOn:
      - "cafeApi"
      - "cafeStage"
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Description: CloudFormation API Key V1
      Enabled: true
      GenerateDistinctId: false
      StageKeys:
        - RestApiId: !Ref cafeApi
          StageName: !Ref stageName


  cafeUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref cafeApiKey
      KeyType: "API_KEY"
      UsagePlanId: !Ref cafeUsagePlan


  cafeDeployment:
#    DependsOn:
#      - "cafeApi"
    Type: AWS::ApiGateway::Deployment
    Properties:
#      DeploymentCanarySettings:
#        DeploymentCanarySettings
      Description: CAFe deployment for testing
      RestApiId: !Ref cafeApi
      StageDescription:
#        AccessLogSetting:
#          AccessLogSetting
#        CacheClusterEnabled: Boolean
#        CacheClusterSize: String
#        CacheDataEncrypted: Boolean
#        CacheTtlInSeconds: Integer
#        CachingEnabled: Boolean
#        CanarySetting:
#          CanarySetting
#        ClientCertificateId: String
        DataTraceEnabled: true
        Description: CAFe deployment stage description
#        DocumentationVersion: String
        LoggingLevel: "INFO"
#        MethodSettings:
#          - MethodSetting
        MetricsEnabled: true
        Tags:
          - Key: env
            Value: dev
#        ThrottlingBurstLimit: Integer
#        ThrottlingRateLimit: Double
        TracingEnabled: true
#        Variables:
#          Key: Value
      StageName: "test"

  cafeApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: cafe
      Description: API for capturing Events (similar to GTM)
      ApiKeySourceType: "HEADER"
#      FailOnWarnings: false
      EndpointConfiguration:
        Types:
          - "REGIONAL"
      Body:
        openapi: "3.0.1"
        info:
          title: "CAFe API for capturing Events "
          version: "1.0.7"
# Causes circular dependency relying on cafeApi refId
#        servers:
#          - url: !Sub "https://${cafeApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${stageName}/"
        paths:
          /swagger:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"\")"
                      application/schema+json: "$util.base64Decode(\"\")"
                      application/x-yaml: "$util.base64Decode(\"\")"
                      application/yaml: "$util.base64Decode(\"\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /log:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/logRecords"
                required: true
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt cafeApiGatewayRole.Arn
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
                responses:
                  4\d{2}:
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "Error": "400",
                          "response": "$input.body"
                        }
                  default:
                    statusCode: "500"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "Error": "500",
                          "response": "$input.body"
                        }
                  2\d{2}:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "failedRequests": $input.path('$.FailedPutCount'),
                          "individualStatus": [
                          #foreach($elem in $input.path('$.RequestResponses'))
                            {
                            #if(!$elem.ErrorCode)
                              "errorCode": "$elem.ErrorCode", #end
                            #if(!$elem.ErrorMessage)
                              "errorMessage": "$elem.ErrorMessage", #end
                              "recordId": "$elem.RecordId"
                            }#if($foreach.hasNext),#end
                          #end
                          ]
                        }
                requestParameters:
                  integration.request.header.Content-Type: "'application/json'"
                passthroughBehavior: "never"
                httpMethod: "POST"
                requestTemplates:
                  application/json: >-
                    #set( $nl = "
                    " )
                    #set($records = $input.path('$.records'))
                    {
                    "DeliveryStreamName": "cafe-log",
                      "Records": [
                      #foreach($elem in $records)
                        #set( $idx = $foreach.count - 1)
                        #set( $f = "$.records[$idx]" )
                        #set( $j = $input.json($f) )
                        #set( $n = "$j$nl" )
                        { "Data": "$util.base64Encode($n)" } #if($foreach.hasNext),#end
                      #end
                      ]
                    }
                type: "aws"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /activity:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/activityRecords"
                required: true
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt cafeApiGatewayRole.Arn
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
                responses:
                  4\d{2}:
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "Error": "400",
                          "response": "$input.body"
                        }
                  default:
                    statusCode: "500"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "Error": "500",
                          "response": "$input.body"
                        }
                  2\d{2}:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "failedRequests": $input.path('$.FailedPutCount'),
                          "individualStatus": [
                          #foreach($elem in $input.path('$.RequestResponses'))
                            {
                            #if(!$elem.ErrorCode)
                              "errorCode": "$elem.ErrorCode", #end
                            #if(!$elem.ErrorMessage)
                              "errorMessage": "$elem.ErrorMessage", #end
                              "recordId": "$elem.RecordId"
                            }#if($foreach.hasNext),#end
                          #end
                          ]
                        }
                requestParameters:
                  integration.request.header.Content-Type: "'application/json'"
                passthroughBehavior: "never"
                httpMethod: "POST"
                requestTemplates:
                  application/json: >-
                    #set( $nl = "
                    " )
                    #set($records = $input.path('$.records'))
                    {
                    "DeliveryStreamName": "cafe-activity",
                      "Records": [
                      #foreach($elem in $records)
                        #set( $idx = $foreach.count - 1)
                        #set( $f = "$.records[$idx]" )
                        #set( $j = $input.json($f) )
                        #set( $n = "$j$nl" )
                        { "Data": "$util.base64Encode($n)" } #if($foreach.hasNext),#end
                      #end
                      ]
                    }
                type: "aws"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"

          /schema/profileRecords:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgInJlY29yZHMiIDogewogICAgICAidHlwZSIgOiAiYXJyYXkiLAogICAgICAibWluSXRlbXMiIDogMSwKICAgICAgIm1heEl0ZW1zIiA6IDUwMCwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2ZpbGUiCiAgICAgIH0KICAgIH0KICB9LAogICJyZXF1aXJlZCIgOiBbICJyZWNvcmRzIiBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQp9\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgInJlY29yZHMiIDogewogICAgICAidHlwZSIgOiAiYXJyYXkiLAogICAgICAibWluSXRlbXMiIDogMSwKICAgICAgIm1heEl0ZW1zIiA6IDUwMCwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2ZpbGUiCiAgICAgIH0KICAgIH0KICB9LAogICJyZXF1aXJlZCIgOiBbICJyZWNvcmRzIiBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQp9\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIHJlY29yZHM6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBtaW5JdGVtczogMQogICAgbWF4SXRlbXM6IDUwMAogICAgaXRlbXM6CiAgICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZmlsZSIKcmVxdWlyZWQ6Ci0gInJlY29yZHMiCmFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQo=\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIHJlY29yZHM6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBtaW5JdGVtczogMQogICAgbWF4SXRlbXM6IDUwMAogICAgaXRlbXM6CiAgICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZmlsZSIKcmVxdWlyZWQ6Ci0gInJlY29yZHMiCmFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQo=\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/logRecords:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgInJlY29yZHMiIDogewogICAgICAidHlwZSIgOiAiYXJyYXkiLAogICAgICAibWluSXRlbXMiIDogMSwKICAgICAgIm1heEl0ZW1zIiA6IDUwMCwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2xvZyIKICAgICAgfQogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgInJlY29yZHMiIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlCn0=\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgInJlY29yZHMiIDogewogICAgICAidHlwZSIgOiAiYXJyYXkiLAogICAgICAibWluSXRlbXMiIDogMSwKICAgICAgIm1heEl0ZW1zIiA6IDUwMCwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2xvZyIKICAgICAgfQogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgInJlY29yZHMiIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlCn0=\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIHJlY29yZHM6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBtaW5JdGVtczogMQogICAgbWF4SXRlbXM6IDUwMAogICAgaXRlbXM6CiAgICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvbG9nIgpyZXF1aXJlZDoKLSAicmVjb3JkcyIKYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCg==\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIHJlY29yZHM6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBtaW5JdGVtczogMQogICAgbWF4SXRlbXM6IDUwMAogICAgaXRlbXM6CiAgICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvbG9nIgpyZXF1aXJlZDoKLSAicmVjb3JkcyIKYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCg==\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/userPlatform:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJzdHJpbmciLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgc3lzdGVtIGRlZmluaW5nIHRoZSB1c2VyIHJlY29yZCIsCiAgInRpdGxlIiA6ICJVc2VyUGxhdGZvcm0iLAogICJlbnVtIiA6IFsgInNzbyIsICJ3ZWJhc3NpZ24iLCAidGVzdGhhcm5lc3MiIF0KfQ==\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJzdHJpbmciLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgc3lzdGVtIGRlZmluaW5nIHRoZSB1c2VyIHJlY29yZCIsCiAgInRpdGxlIiA6ICJVc2VyUGxhdGZvcm0iLAogICJlbnVtIiA6IFsgInNzbyIsICJ3ZWJhc3NpZ24iLCAidGVzdGhhcm5lc3MiIF0KfQ==\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJzdHJpbmciCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpkZXNjcmlwdGlvbjogInRoZSBzeXN0ZW0gZGVmaW5pbmcgdGhlIHVzZXIgcmVjb3JkIgp0aXRsZTogIlVzZXJQbGF0Zm9ybSIKZW51bToKLSAic3NvIgotICJ3ZWJhc3NpZ24iCi0gInRlc3RoYXJuZXNzIgo=\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJzdHJpbmciCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpkZXNjcmlwdGlvbjogInRoZSBzeXN0ZW0gZGVmaW5pbmcgdGhlIHVzZXIgcmVjb3JkIgp0aXRsZTogIlVzZXJQbGF0Zm9ybSIKZW51bToKLSAic3NvIgotICJ3ZWJhc3NpZ24iCi0gInRlc3RoYXJuZXNzIgo=\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/productPlatform:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJzdHJpbmciLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgYXBwbGljYXRpb24gbmFtZSByZXBvcnRpbmcgdGhlIGV2ZW50LCBlLmcuIE1pbmRUYXAiLAogICJ0aXRsZSIgOiAiUHJvZHVjdFBsYXRmb3JtIiwKICAiZW51bSIgOiBbICJhbmFseXRpY3MtcG9ydGFsIiwgInByZS1jb3Vyc2UtZGlhZ25vc3RpYyIsICJyaXNrLWFzc2Vzc21lbnQiLCAiY3Utc2lkZS1iYXIiLCAibXQtZW5nYWdlbWVudC1yZXBvcnQtdWkiLCAiYWxzIiwgImR3cCIsICJ3ZWJhc3NpZ24iLCAibWluZHRhcCIsICJjYXJlZXItam91cm5leSIsICJkYXNoYm9hcmQiLCAiY3VfZGFzaGJvYXJkIiwgInBlcmZvcm1hbmNlLXJlcG9ydC11aSIsICJwZXJmb3JtYW5jZS1yZXBvcnRzLXdpZGdldHMiLCAibXRzIiwgImluZHVzdHJ5LWxpbmtzLW1pbmRhcHAiLCAiY2FzLW10IiwgImNhcy1tdHMiLCAiY2FzLWN1IiwgImNhcy1tZWYiLCAidGVzdGhhcm5lc3MiLCAic2FwLXN1YnNjcmlwdGlvbi11aSIsICJnZXQtZW5yb2xsZWQiLCAibWVmIiwgIm1pbmR0YXAtZ2lhIiwgIm1vYmlsZSIsICJncmFkZWJvb2stbXQiLCAiZWNvbW1lcmNlIiwgIm1pY3Jvc2l0ZSIsICJjZW5nYWdlLW1vYmlsZSIsICJjbm93djciLCAib3dsdjIiLCAiY25vd3Y4IiwgInNhbSIsICJhcGxpYSIgXQp9\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJzdHJpbmciLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgYXBwbGljYXRpb24gbmFtZSByZXBvcnRpbmcgdGhlIGV2ZW50LCBlLmcuIE1pbmRUYXAiLAogICJ0aXRsZSIgOiAiUHJvZHVjdFBsYXRmb3JtIiwKICAiZW51bSIgOiBbICJhbmFseXRpY3MtcG9ydGFsIiwgInByZS1jb3Vyc2UtZGlhZ25vc3RpYyIsICJyaXNrLWFzc2Vzc21lbnQiLCAiY3Utc2lkZS1iYXIiLCAibXQtZW5nYWdlbWVudC1yZXBvcnQtdWkiLCAiYWxzIiwgImR3cCIsICJ3ZWJhc3NpZ24iLCAibWluZHRhcCIsICJjYXJlZXItam91cm5leSIsICJkYXNoYm9hcmQiLCAiY3VfZGFzaGJvYXJkIiwgInBlcmZvcm1hbmNlLXJlcG9ydC11aSIsICJwZXJmb3JtYW5jZS1yZXBvcnRzLXdpZGdldHMiLCAibXRzIiwgImluZHVzdHJ5LWxpbmtzLW1pbmRhcHAiLCAiY2FzLW10IiwgImNhcy1tdHMiLCAiY2FzLWN1IiwgImNhcy1tZWYiLCAidGVzdGhhcm5lc3MiLCAic2FwLXN1YnNjcmlwdGlvbi11aSIsICJnZXQtZW5yb2xsZWQiLCAibWVmIiwgIm1pbmR0YXAtZ2lhIiwgIm1vYmlsZSIsICJncmFkZWJvb2stbXQiLCAiZWNvbW1lcmNlIiwgIm1pY3Jvc2l0ZSIsICJjZW5nYWdlLW1vYmlsZSIsICJjbm93djciLCAib3dsdjIiLCAiY25vd3Y4IiwgInNhbSIsICJhcGxpYSIgXQp9\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJzdHJpbmciCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpkZXNjcmlwdGlvbjogInRoZSBhcHBsaWNhdGlvbiBuYW1lIHJlcG9ydGluZyB0aGUgZXZlbnQsIGUuZy4gTWluZFRhcCIKdGl0bGU6ICJQcm9kdWN0UGxhdGZvcm0iCmVudW06Ci0gImFuYWx5dGljcy1wb3J0YWwiCi0gInByZS1jb3Vyc2UtZGlhZ25vc3RpYyIKLSAicmlzay1hc3Nlc3NtZW50IgotICJjdS1zaWRlLWJhciIKLSAibXQtZW5nYWdlbWVudC1yZXBvcnQtdWkiCi0gImFscyIKLSAiZHdwIgotICJ3ZWJhc3NpZ24iCi0gIm1pbmR0YXAiCi0gImNhcmVlci1qb3VybmV5IgotICJkYXNoYm9hcmQiCi0gImN1X2Rhc2hib2FyZCIKLSAicGVyZm9ybWFuY2UtcmVwb3J0LXVpIgotICJwZXJmb3JtYW5jZS1yZXBvcnRzLXdpZGdldHMiCi0gIm10cyIKLSAiaW5kdXN0cnktbGlua3MtbWluZGFwcCIKLSAiY2FzLW10IgotICJjYXMtbXRzIgotICJjYXMtY3UiCi0gImNhcy1tZWYiCi0gInRlc3RoYXJuZXNzIgotICJzYXAtc3Vic2NyaXB0aW9uLXVpIgotICJnZXQtZW5yb2xsZWQiCi0gIm1lZiIKLSAibWluZHRhcC1naWEiCi0gIm1vYmlsZSIKLSAiZ3JhZGVib29rLW10IgotICJlY29tbWVyY2UiCi0gIm1pY3Jvc2l0ZSIKLSAiY2VuZ2FnZS1tb2JpbGUiCi0gImNub3d2NyIKLSAib3dsdjIiCi0gImNub3d2OCIKLSAic2FtIgotICJhcGxpYSIK\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJzdHJpbmciCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpkZXNjcmlwdGlvbjogInRoZSBhcHBsaWNhdGlvbiBuYW1lIHJlcG9ydGluZyB0aGUgZXZlbnQsIGUuZy4gTWluZFRhcCIKdGl0bGU6ICJQcm9kdWN0UGxhdGZvcm0iCmVudW06Ci0gImFuYWx5dGljcy1wb3J0YWwiCi0gInByZS1jb3Vyc2UtZGlhZ25vc3RpYyIKLSAicmlzay1hc3Nlc3NtZW50IgotICJjdS1zaWRlLWJhciIKLSAibXQtZW5nYWdlbWVudC1yZXBvcnQtdWkiCi0gImFscyIKLSAiZHdwIgotICJ3ZWJhc3NpZ24iCi0gIm1pbmR0YXAiCi0gImNhcmVlci1qb3VybmV5IgotICJkYXNoYm9hcmQiCi0gImN1X2Rhc2hib2FyZCIKLSAicGVyZm9ybWFuY2UtcmVwb3J0LXVpIgotICJwZXJmb3JtYW5jZS1yZXBvcnRzLXdpZGdldHMiCi0gIm10cyIKLSAiaW5kdXN0cnktbGlua3MtbWluZGFwcCIKLSAiY2FzLW10IgotICJjYXMtbXRzIgotICJjYXMtY3UiCi0gImNhcy1tZWYiCi0gInRlc3RoYXJuZXNzIgotICJzYXAtc3Vic2NyaXB0aW9uLXVpIgotICJnZXQtZW5yb2xsZWQiCi0gIm1lZiIKLSAibWluZHRhcC1naWEiCi0gIm1vYmlsZSIKLSAiZ3JhZGVib29rLW10IgotICJlY29tbWVyY2UiCi0gIm1pY3Jvc2l0ZSIKLSAiY2VuZ2FnZS1tb2JpbGUiCi0gImNub3d2NyIKLSAib3dsdjIiCi0gImNub3d2OCIKLSAic2FtIgotICJhcGxpYSIK\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/submissionResponse:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgImZhaWxlZFJlcXVlc3RzIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIKICAgIH0sCiAgICAiaW5kaXZpZHVhbFN0YXR1cyIgOiB7CiAgICAgICJ0eXBlIiA6ICJhcnJheSIsCiAgICAgICJpdGVtcyIgOiB7CiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInRpdGxlIiA6ICJSZWNvcmRTdGF0dXMiLAogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICJyZWNvcmRJZCIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImVycm9yTWVzc2FnZSIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImVycm9yQ29kZSIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UsCiAgICAgICAgInJlcXVpcmVkIiA6IFsgInJlY29yZElkIiBdCiAgICAgIH0KICAgIH0KICB9LAogICJyZXF1aXJlZCIgOiBbICJmYWlsZWRSZXF1ZXN0cyIsICJpbmRpdmlkdWFsU3RhdHVzIiBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQp9\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgImZhaWxlZFJlcXVlc3RzIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIKICAgIH0sCiAgICAiaW5kaXZpZHVhbFN0YXR1cyIgOiB7CiAgICAgICJ0eXBlIiA6ICJhcnJheSIsCiAgICAgICJpdGVtcyIgOiB7CiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInRpdGxlIiA6ICJSZWNvcmRTdGF0dXMiLAogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICJyZWNvcmRJZCIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImVycm9yTWVzc2FnZSIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImVycm9yQ29kZSIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UsCiAgICAgICAgInJlcXVpcmVkIiA6IFsgInJlY29yZElkIiBdCiAgICAgIH0KICAgIH0KICB9LAogICJyZXF1aXJlZCIgOiBbICJmYWlsZWRSZXF1ZXN0cyIsICJpbmRpdmlkdWFsU3RhdHVzIiBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQp9\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIGZhaWxlZFJlcXVlc3RzOgogICAgdHlwZTogIm51bWJlciIKICBpbmRpdmlkdWFsU3RhdHVzOgogICAgdHlwZTogImFycmF5IgogICAgaXRlbXM6CiAgICAgIHR5cGU6ICJvYmplY3QiCiAgICAgIHRpdGxlOiAiUmVjb3JkU3RhdHVzIgogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHJlY29yZElkOgogICAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICBlcnJvck1lc3NhZ2U6CiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIGVycm9yQ29kZToKICAgICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQogICAgICByZXF1aXJlZDoKICAgICAgLSAicmVjb3JkSWQiCnJlcXVpcmVkOgotICJmYWlsZWRSZXF1ZXN0cyIKLSAiaW5kaXZpZHVhbFN0YXR1cyIKYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCg==\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIGZhaWxlZFJlcXVlc3RzOgogICAgdHlwZTogIm51bWJlciIKICBpbmRpdmlkdWFsU3RhdHVzOgogICAgdHlwZTogImFycmF5IgogICAgaXRlbXM6CiAgICAgIHR5cGU6ICJvYmplY3QiCiAgICAgIHRpdGxlOiAiUmVjb3JkU3RhdHVzIgogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHJlY29yZElkOgogICAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICBlcnJvck1lc3NhZ2U6CiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIGVycm9yQ29kZToKICAgICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQogICAgICByZXF1aXJlZDoKICAgICAgLSAicmVjb3JkSWQiCnJlcXVpcmVkOgotICJmYWlsZWRSZXF1ZXN0cyIKLSAiaW5kaXZpZHVhbFN0YXR1cyIKYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCg==\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/log:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICJlbnVtIiA6IFsgMSBdLAogICAgICAiZGVmYXVsdCIgOiAxCiAgICB9LAogICAgIm1lc3NhZ2VUeXBlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkNsaWVudEV2ZW50aW5nTG9nIiBdLAogICAgICAiZGVmYXVsdCIgOiAiQ2xpZW50RXZlbnRpbmdMb2ciCiAgICB9LAogICAgInByb2R1Y3RQbGF0Zm9ybSIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogICAgfSwKICAgICJwcm9kdWN0RW52aXJvbm1lbnQiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgZW52aXJvbm1lbnQgb2YgdGhlIGFwcGxpY2F0aW9uIHJlcG9ydGluZyB0aGUgZXZlbnQsIGUuZy4gc3RhZ2luZyIsCiAgICAgICJtYXhMZW5ndGgiIDogNjAsCiAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdy1dKyQiCiAgICB9LAogICAgImV2ZW50VXJpIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtaW5MZW5ndGgiIDogMSwKICAgICAgIm1heExlbmd0aCIgOiAyNTUsCiAgICAgICJwYXR0ZXJuIiA6ICJeKChbYS16QS1aXVswLTlhLXpBLVorXFwtXFwuXSo6KT8vezAsMn1bMC05YS16QS1aOywvPzpAJj0rXFwuXFwtXyF+KicoKSVdKykoI1swLTlhLXpBLVo7LC8/OkAmPStcXC5cXC1fIX4qJygpJV0qKT8kIgogICAgfSwKICAgICJzZXNzaW9uSWQiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiAyMDQ4LAogICAgICAicGF0dGVybiIgOiAiXltBLVphLXowLTlfXFwuXFwtXFwvKz1dKyQiCiAgICB9LAogICAgImxvZ1RpbWUiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdGltZSBvZiB0aGUgZXZlbnQsIGFzIGRlZmluZWQgaW4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjYiLAogICAgICAiZm9ybWF0IiA6ICJkYXRlLXRpbWUiCiAgICB9LAogICAgImxvZ0xldmVsIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkVycm9yIiwgIldhcm4iLCAiRGVidWciLCAiSW5mbyIgXSwKICAgICAgImRlZmF1bHQiIDogIkVycm9yIgogICAgfSwKICAgICJsb2dNZXNzYWdlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtYXhMZW5ndGgiIDogMjAwMDAsCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGxvZyBtZXNzYWdlIgogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiwgInByb2R1Y3RFbnZpcm9ubWVudCIsICJwcm9kdWN0UGxhdGZvcm0iLCAibG9nTGV2ZWwiLCAibWVzc2FnZVR5cGUiLCAibG9nTWVzc2FnZSIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICJlbnVtIiA6IFsgMSBdLAogICAgICAiZGVmYXVsdCIgOiAxCiAgICB9LAogICAgIm1lc3NhZ2VUeXBlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkNsaWVudEV2ZW50aW5nTG9nIiBdLAogICAgICAiZGVmYXVsdCIgOiAiQ2xpZW50RXZlbnRpbmdMb2ciCiAgICB9LAogICAgInByb2R1Y3RQbGF0Zm9ybSIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogICAgfSwKICAgICJwcm9kdWN0RW52aXJvbm1lbnQiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgZW52aXJvbm1lbnQgb2YgdGhlIGFwcGxpY2F0aW9uIHJlcG9ydGluZyB0aGUgZXZlbnQsIGUuZy4gc3RhZ2luZyIsCiAgICAgICJtYXhMZW5ndGgiIDogNjAsCiAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdy1dKyQiCiAgICB9LAogICAgImV2ZW50VXJpIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtaW5MZW5ndGgiIDogMSwKICAgICAgIm1heExlbmd0aCIgOiAyNTUsCiAgICAgICJwYXR0ZXJuIiA6ICJeKChbYS16QS1aXVswLTlhLXpBLVorXFwtXFwuXSo6KT8vezAsMn1bMC05YS16QS1aOywvPzpAJj0rXFwuXFwtXyF+KicoKSVdKykoI1swLTlhLXpBLVo7LC8/OkAmPStcXC5cXC1fIX4qJygpJV0qKT8kIgogICAgfSwKICAgICJzZXNzaW9uSWQiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiAyMDQ4LAogICAgICAicGF0dGVybiIgOiAiXltBLVphLXowLTlfXFwuXFwtXFwvKz1dKyQiCiAgICB9LAogICAgImxvZ1RpbWUiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdGltZSBvZiB0aGUgZXZlbnQsIGFzIGRlZmluZWQgaW4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjYiLAogICAgICAiZm9ybWF0IiA6ICJkYXRlLXRpbWUiCiAgICB9LAogICAgImxvZ0xldmVsIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkVycm9yIiwgIldhcm4iLCAiRGVidWciLCAiSW5mbyIgXSwKICAgICAgImRlZmF1bHQiIDogIkVycm9yIgogICAgfSwKICAgICJsb2dNZXNzYWdlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtYXhMZW5ndGgiIDogMjAwMDAsCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGxvZyBtZXNzYWdlIgogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiwgInByb2R1Y3RFbnZpcm9ubWVudCIsICJwcm9kdWN0UGxhdGZvcm0iLCAibG9nTGV2ZWwiLCAibWVzc2FnZVR5cGUiLCAibG9nTWVzc2FnZSIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIG1lc3NhZ2VGb3JtYXRWZXJzaW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGVudW06CiAgICAtIDEKICAgIGRlZmF1bHQ6IDEKICBtZXNzYWdlVHlwZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBlbnVtOgogICAgLSAiQ2xpZW50RXZlbnRpbmdMb2ciCiAgICBkZWZhdWx0OiAiQ2xpZW50RXZlbnRpbmdMb2ciCiAgcHJvZHVjdFBsYXRmb3JtOgogICAgJHJlZjogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9wcm9kdWN0UGxhdGZvcm0iCiAgcHJvZHVjdEVudmlyb25tZW50OgogICAgdHlwZTogInN0cmluZyIKICAgIGRlc2NyaXB0aW9uOiAidGhlIGVudmlyb25tZW50IG9mIHRoZSBhcHBsaWNhdGlvbiByZXBvcnRpbmcgdGhlIGV2ZW50LCBlLmcuIHN0YWdpbmciCiAgICBtYXhMZW5ndGg6IDYwCiAgICBwYXR0ZXJuOiAiXltcXHctXSskIgogIGV2ZW50VXJpOgogICAgdHlwZTogInN0cmluZyIKICAgIG1pbkxlbmd0aDogMQogICAgbWF4TGVuZ3RoOiAyNTUKICAgIHBhdHRlcm46ICJeKChbYS16QS1aXVswLTlhLXpBLVorXFwtXFwuXSo6KT8vezAsMn1bMC05YS16QS1aOywvPzpAJj0rXFwuXFwtXyF+KicoKSVdKykoI1swLTlhLXpBLVo7LC8/OkAmPStcXFwKICAgICAgLlxcLV8hfionKCklXSopPyQiCiAgc2Vzc2lvbklkOgogICAgdHlwZTogInN0cmluZyIKICAgIG1heExlbmd0aDogMjA0OAogICAgcGF0dGVybjogIl5bQS1aYS16MC05X1xcLlxcLVxcLys9XSskIgogIGxvZ1RpbWU6CiAgICB0eXBlOiAic3RyaW5nIgogICAgZGVzY3JpcHRpb246ICJUaGUgdGltZSBvZiB0aGUgZXZlbnQsIGFzIGRlZmluZWQgaW4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjYiCiAgICBmb3JtYXQ6ICJkYXRlLXRpbWUiCiAgbG9nTGV2ZWw6CiAgICB0eXBlOiAic3RyaW5nIgogICAgZW51bToKICAgIC0gIkVycm9yIgogICAgLSAiV2FybiIKICAgIC0gIkRlYnVnIgogICAgLSAiSW5mbyIKICAgIGRlZmF1bHQ6ICJFcnJvciIKICBsb2dNZXNzYWdlOgogICAgdHlwZTogInN0cmluZyIKICAgIG1heExlbmd0aDogMjAwMDAKICAgIGRlc2NyaXB0aW9uOiAiVGhlIGxvZyBtZXNzYWdlIgpyZXF1aXJlZDoKLSAibWVzc2FnZUZvcm1hdFZlcnNpb24iCi0gInByb2R1Y3RFbnZpcm9ubWVudCIKLSAicHJvZHVjdFBsYXRmb3JtIgotICJsb2dMZXZlbCIKLSAibWVzc2FnZVR5cGUiCi0gImxvZ01lc3NhZ2UiCmFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQo=\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIG1lc3NhZ2VGb3JtYXRWZXJzaW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGVudW06CiAgICAtIDEKICAgIGRlZmF1bHQ6IDEKICBtZXNzYWdlVHlwZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBlbnVtOgogICAgLSAiQ2xpZW50RXZlbnRpbmdMb2ciCiAgICBkZWZhdWx0OiAiQ2xpZW50RXZlbnRpbmdMb2ciCiAgcHJvZHVjdFBsYXRmb3JtOgogICAgJHJlZjogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9wcm9kdWN0UGxhdGZvcm0iCiAgcHJvZHVjdEVudmlyb25tZW50OgogICAgdHlwZTogInN0cmluZyIKICAgIGRlc2NyaXB0aW9uOiAidGhlIGVudmlyb25tZW50IG9mIHRoZSBhcHBsaWNhdGlvbiByZXBvcnRpbmcgdGhlIGV2ZW50LCBlLmcuIHN0YWdpbmciCiAgICBtYXhMZW5ndGg6IDYwCiAgICBwYXR0ZXJuOiAiXltcXHctXSskIgogIGV2ZW50VXJpOgogICAgdHlwZTogInN0cmluZyIKICAgIG1pbkxlbmd0aDogMQogICAgbWF4TGVuZ3RoOiAyNTUKICAgIHBhdHRlcm46ICJeKChbYS16QS1aXVswLTlhLXpBLVorXFwtXFwuXSo6KT8vezAsMn1bMC05YS16QS1aOywvPzpAJj0rXFwuXFwtXyF+KicoKSVdKykoI1swLTlhLXpBLVo7LC8/OkAmPStcXFwKICAgICAgLlxcLV8hfionKCklXSopPyQiCiAgc2Vzc2lvbklkOgogICAgdHlwZTogInN0cmluZyIKICAgIG1heExlbmd0aDogMjA0OAogICAgcGF0dGVybjogIl5bQS1aYS16MC05X1xcLlxcLVxcLys9XSskIgogIGxvZ1RpbWU6CiAgICB0eXBlOiAic3RyaW5nIgogICAgZGVzY3JpcHRpb246ICJUaGUgdGltZSBvZiB0aGUgZXZlbnQsIGFzIGRlZmluZWQgaW4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjYiCiAgICBmb3JtYXQ6ICJkYXRlLXRpbWUiCiAgbG9nTGV2ZWw6CiAgICB0eXBlOiAic3RyaW5nIgogICAgZW51bToKICAgIC0gIkVycm9yIgogICAgLSAiV2FybiIKICAgIC0gIkRlYnVnIgogICAgLSAiSW5mbyIKICAgIGRlZmF1bHQ6ICJFcnJvciIKICBsb2dNZXNzYWdlOgogICAgdHlwZTogInN0cmluZyIKICAgIG1heExlbmd0aDogMjAwMDAKICAgIGRlc2NyaXB0aW9uOiAiVGhlIGxvZyBtZXNzYWdlIgpyZXF1aXJlZDoKLSAibWVzc2FnZUZvcm1hdFZlcnNpb24iCi0gInByb2R1Y3RFbnZpcm9ubWVudCIKLSAicHJvZHVjdFBsYXRmb3JtIgotICJsb2dMZXZlbCIKLSAibWVzc2FnZVR5cGUiCi0gImxvZ01lc3NhZ2UiCmFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQo=\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/activity:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICJlbnVtIiA6IFsgMSBdLAogICAgICAiZGVmYXVsdCIgOiAxCiAgICB9LAogICAgIm1lc3NhZ2VUeXBlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkNsaWVudEV2ZW50aW5nQWN0aXZpdHkiIF0sCiAgICAgICJkZWZhdWx0IiA6ICJDbGllbnRFdmVudGluZ0FjdGl2aXR5IgogICAgfSwKICAgICJldmVudFRpbWUiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdGltZSBvZiB0aGUgZXZlbnQsIGFzIGRlZmluZWQgaW4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjYiLAogICAgICAiZm9ybWF0IiA6ICJkYXRlLXRpbWUiCiAgICB9LAogICAgImV2ZW50RHVyYXRpb24iIDogewogICAgICAidHlwZSIgOiAibnVtYmVyIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJJZiBhcHBsaWNhYmxlLCBob3cgbG9uZyB0aGUgZXZlbnQgdG9vay4iLAogICAgICAibWluaW11bSIgOiAwCiAgICB9LAogICAgImV2ZW50Q2F0ZWdvcnkiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiA0MCwKICAgICAgInBhdHRlcm4iIDogIl5bXFx3LV0rJCIKICAgIH0sCiAgICAiZXZlbnRBY3Rpb24iIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiA0MCwKICAgICAgInBhdHRlcm4iIDogIl5bXFx3LV0rJCIKICAgIH0sCiAgICAicHJvZHVjdFBsYXRmb3JtIiA6IHsKICAgICAgIiRyZWYiIDogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9wcm9kdWN0UGxhdGZvcm0iCiAgICB9LAogICAgInByb2R1Y3RFbnZpcm9ubWVudCIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgICB9LAogICAgInVzZXJQbGF0Zm9ybSIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvdXNlclBsYXRmb3JtIgogICAgfSwKICAgICJ1c2VyRW52aXJvbm1lbnQiIDogewogICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogICAgfSwKICAgICJob3N0UGxhdGZvcm0iIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJpZiB0aGUgcHJvZHVjdCBpcyBob3N0ZWQgd2l0aGluIGFub3RoZXIgcHJvZHVjdCwgYXMgYW4gaUZyYW1lIGZvciBleGFtcGxlLCB0aGUgcGxhdGZvcm1cbm9mIHRoZSBob3N0LCBlLmcuIGlmIHRoZSBDQVAtRVIgcHJvZHVjdCBpcyBob3N0ZWQgaW4gYW4gaWZyYW1lIHdpdGggTWluZFRhcCxcbnRoZSBwcm9kdWN0UGxhdGZvcm0gd291bGQgYmUgQ0FQLUVSIGFuZCB0aGUgaG9zdFBsYXRmb3JtIHdvdWxkIGJlIE1pbmRUYXAiLAogICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2R1Y3RQbGF0Zm9ybSIKICAgIH0sCiAgICAiaG9zdEVudmlyb25tZW50IiA6IHsKICAgICAgIiRyZWYiIDogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9lbnZpcm9ubWVudCIKICAgIH0sCiAgICAic2Vzc2lvbklkIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtYXhMZW5ndGgiIDogMjA0OCwKICAgICAgInBhdHRlcm4iIDogIl5bQS1aYS16MC05X1xcLlxcLVxcLys9XSskIgogICAgfSwKICAgICJldmVudElkIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBhY3Rpdml0eSByZWNvcmQgKE5PVCBmb3IgdGhlIGFjdGl2aXR5IHRoZSB1c2VyIHdhcyB2aWV3aW5nKSIsCiAgICAgICJtYXhMZW5ndGgiIDogMzYsCiAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdy1dKyQiCiAgICB9LAogICAgInVzZXJTU09HVUlEIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtaW5MZW5ndGgiIDogMSwKICAgICAgIm1heExlbmd0aCIgOiAxMDAsCiAgICAgICJwYXR0ZXJuIiA6ICJeW2EtekEtWjAtOTpcXC17fV17MSwyNTV9JCIKICAgIH0sCiAgICAiZXZlbnRVcmkiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1pbkxlbmd0aCIgOiAxLAogICAgICAibWF4TGVuZ3RoIiA6IDIwNDgsCiAgICAgICJwYXR0ZXJuIiA6ICJeKChbYS16QS1aXVswLTlhLXpBLVorXFwtXFwuXSo6KT8vezAsMn1bMC05YS16QS1aOywvPzpAJj0rXFwuXFwtXyF+KicoKSVdKykoI1swLTlhLXpBLVo7LC8/OkAmPStcXC5cXC1fIX4qJygpJV0qKT8kIgogICAgfSwKICAgICJ0YWdzIiA6IHsKICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBbiBhcnJheSBvZiBjdXN0b20gdGFncyBmdXJ0aGVyIGRlc2NyaWJpbmcgdGhlIGFjdGl2aXR5LCBlLmcuIGFjdGl2aXR5SWQgb3IgY291cnNlS2V5IG9yIGNvdXJzZUNHSSIsCiAgICAgICJtYXhJdGVtcyIgOiAxNSwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwKICAgICAgICAidGl0bGUiIDogIkFjdGl2aXR5VGFnIiwKICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAia2V5IiA6IHsKICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAgICJtYXhMZW5ndGgiIDogNDAsCiAgICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcd18tXSskIgogICAgICAgICAgfSwKICAgICAgICAgICJ2YWx1ZSIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgICAibWF4TGVuZ3RoIiA6IDI1NiwKICAgICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3OyAsLz86QCY9K1xcLlxcLV8hfionKCklXSskIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlLAogICAgICAgICJyZXF1aXJlZCIgOiBbICJrZXkiLCAidmFsdWUiIF0KICAgICAgfQogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiwgIm1lc3NhZ2VUeXBlIiwgImV2ZW50VGltZSIsICJldmVudENhdGVnb3J5IiwgImV2ZW50QWN0aW9uIiwgInByb2R1Y3RFbnZpcm9ubWVudCIsICJwcm9kdWN0UGxhdGZvcm0iLCAic2Vzc2lvbklkIiwgImV2ZW50SWQiIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlCn0=\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICJlbnVtIiA6IFsgMSBdLAogICAgICAiZGVmYXVsdCIgOiAxCiAgICB9LAogICAgIm1lc3NhZ2VUeXBlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkNsaWVudEV2ZW50aW5nQWN0aXZpdHkiIF0sCiAgICAgICJkZWZhdWx0IiA6ICJDbGllbnRFdmVudGluZ0FjdGl2aXR5IgogICAgfSwKICAgICJldmVudFRpbWUiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdGltZSBvZiB0aGUgZXZlbnQsIGFzIGRlZmluZWQgaW4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjYiLAogICAgICAiZm9ybWF0IiA6ICJkYXRlLXRpbWUiCiAgICB9LAogICAgImV2ZW50RHVyYXRpb24iIDogewogICAgICAidHlwZSIgOiAibnVtYmVyIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJJZiBhcHBsaWNhYmxlLCBob3cgbG9uZyB0aGUgZXZlbnQgdG9vay4iLAogICAgICAibWluaW11bSIgOiAwCiAgICB9LAogICAgImV2ZW50Q2F0ZWdvcnkiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiA0MCwKICAgICAgInBhdHRlcm4iIDogIl5bXFx3LV0rJCIKICAgIH0sCiAgICAiZXZlbnRBY3Rpb24iIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiA0MCwKICAgICAgInBhdHRlcm4iIDogIl5bXFx3LV0rJCIKICAgIH0sCiAgICAicHJvZHVjdFBsYXRmb3JtIiA6IHsKICAgICAgIiRyZWYiIDogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9wcm9kdWN0UGxhdGZvcm0iCiAgICB9LAogICAgInByb2R1Y3RFbnZpcm9ubWVudCIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgICB9LAogICAgInVzZXJQbGF0Zm9ybSIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvdXNlclBsYXRmb3JtIgogICAgfSwKICAgICJ1c2VyRW52aXJvbm1lbnQiIDogewogICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogICAgfSwKICAgICJob3N0UGxhdGZvcm0iIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJpZiB0aGUgcHJvZHVjdCBpcyBob3N0ZWQgd2l0aGluIGFub3RoZXIgcHJvZHVjdCwgYXMgYW4gaUZyYW1lIGZvciBleGFtcGxlLCB0aGUgcGxhdGZvcm1cbm9mIHRoZSBob3N0LCBlLmcuIGlmIHRoZSBDQVAtRVIgcHJvZHVjdCBpcyBob3N0ZWQgaW4gYW4gaWZyYW1lIHdpdGggTWluZFRhcCxcbnRoZSBwcm9kdWN0UGxhdGZvcm0gd291bGQgYmUgQ0FQLUVSIGFuZCB0aGUgaG9zdFBsYXRmb3JtIHdvdWxkIGJlIE1pbmRUYXAiLAogICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2R1Y3RQbGF0Zm9ybSIKICAgIH0sCiAgICAiaG9zdEVudmlyb25tZW50IiA6IHsKICAgICAgIiRyZWYiIDogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9lbnZpcm9ubWVudCIKICAgIH0sCiAgICAic2Vzc2lvbklkIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtYXhMZW5ndGgiIDogMjA0OCwKICAgICAgInBhdHRlcm4iIDogIl5bQS1aYS16MC05X1xcLlxcLVxcLys9XSskIgogICAgfSwKICAgICJldmVudElkIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBhY3Rpdml0eSByZWNvcmQgKE5PVCBmb3IgdGhlIGFjdGl2aXR5IHRoZSB1c2VyIHdhcyB2aWV3aW5nKSIsCiAgICAgICJtYXhMZW5ndGgiIDogMzYsCiAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdy1dKyQiCiAgICB9LAogICAgInVzZXJTU09HVUlEIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJtaW5MZW5ndGgiIDogMSwKICAgICAgIm1heExlbmd0aCIgOiAxMDAsCiAgICAgICJwYXR0ZXJuIiA6ICJeW2EtekEtWjAtOTpcXC17fV17MSwyNTV9JCIKICAgIH0sCiAgICAiZXZlbnRVcmkiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1pbkxlbmd0aCIgOiAxLAogICAgICAibWF4TGVuZ3RoIiA6IDIwNDgsCiAgICAgICJwYXR0ZXJuIiA6ICJeKChbYS16QS1aXVswLTlhLXpBLVorXFwtXFwuXSo6KT8vezAsMn1bMC05YS16QS1aOywvPzpAJj0rXFwuXFwtXyF+KicoKSVdKykoI1swLTlhLXpBLVo7LC8/OkAmPStcXC5cXC1fIX4qJygpJV0qKT8kIgogICAgfSwKICAgICJ0YWdzIiA6IHsKICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBbiBhcnJheSBvZiBjdXN0b20gdGFncyBmdXJ0aGVyIGRlc2NyaWJpbmcgdGhlIGFjdGl2aXR5LCBlLmcuIGFjdGl2aXR5SWQgb3IgY291cnNlS2V5IG9yIGNvdXJzZUNHSSIsCiAgICAgICJtYXhJdGVtcyIgOiAxNSwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwKICAgICAgICAidGl0bGUiIDogIkFjdGl2aXR5VGFnIiwKICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAia2V5IiA6IHsKICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAgICJtYXhMZW5ndGgiIDogNDAsCiAgICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcd18tXSskIgogICAgICAgICAgfSwKICAgICAgICAgICJ2YWx1ZSIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgICAibWF4TGVuZ3RoIiA6IDI1NiwKICAgICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3OyAsLz86QCY9K1xcLlxcLV8hfionKCklXSskIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlLAogICAgICAgICJyZXF1aXJlZCIgOiBbICJrZXkiLCAidmFsdWUiIF0KICAgICAgfQogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiwgIm1lc3NhZ2VUeXBlIiwgImV2ZW50VGltZSIsICJldmVudENhdGVnb3J5IiwgImV2ZW50QWN0aW9uIiwgInByb2R1Y3RFbnZpcm9ubWVudCIsICJwcm9kdWN0UGxhdGZvcm0iLCAic2Vzc2lvbklkIiwgImV2ZW50SWQiIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlCn0=\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIG1lc3NhZ2VGb3JtYXRWZXJzaW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGVudW06CiAgICAtIDEKICAgIGRlZmF1bHQ6IDEKICBtZXNzYWdlVHlwZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBlbnVtOgogICAgLSAiQ2xpZW50RXZlbnRpbmdBY3Rpdml0eSIKICAgIGRlZmF1bHQ6ICJDbGllbnRFdmVudGluZ0FjdGl2aXR5IgogIGV2ZW50VGltZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBkZXNjcmlwdGlvbjogIlRoZSB0aW1lIG9mIHRoZSBldmVudCwgYXMgZGVmaW5lZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNiIKICAgIGZvcm1hdDogImRhdGUtdGltZSIKICBldmVudER1cmF0aW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGRlc2NyaXB0aW9uOiAiSWYgYXBwbGljYWJsZSwgaG93IGxvbmcgdGhlIGV2ZW50IHRvb2suIgogICAgbWluaW11bTogMAogIGV2ZW50Q2F0ZWdvcnk6CiAgICB0eXBlOiAic3RyaW5nIgogICAgbWF4TGVuZ3RoOiA0MAogICAgcGF0dGVybjogIl5bXFx3LV0rJCIKICBldmVudEFjdGlvbjoKICAgIHR5cGU6ICJzdHJpbmciCiAgICBtYXhMZW5ndGg6IDQwCiAgICBwYXR0ZXJuOiAiXltcXHctXSskIgogIHByb2R1Y3RQbGF0Zm9ybToKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogIHByb2R1Y3RFbnZpcm9ubWVudDoKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgdXNlclBsYXRmb3JtOgogICAgJHJlZjogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS91c2VyUGxhdGZvcm0iCiAgdXNlckVudmlyb25tZW50OgogICAgJHJlZjogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9lbnZpcm9ubWVudCIKICBob3N0UGxhdGZvcm06CiAgICB0eXBlOiAic3RyaW5nIgogICAgZGVzY3JpcHRpb246ICJpZiB0aGUgcHJvZHVjdCBpcyBob3N0ZWQgd2l0aGluIGFub3RoZXIgcHJvZHVjdCwgYXMgYW4gaUZyYW1lIGZvclwKICAgICAgXCBleGFtcGxlLCB0aGUgcGxhdGZvcm1cbm9mIHRoZSBob3N0LCBlLmcuIGlmIHRoZSBDQVAtRVIgcHJvZHVjdCBpcyBob3N0ZWQgaW5cCiAgICAgIFwgYW4gaWZyYW1lIHdpdGggTWluZFRhcCxcbnRoZSBwcm9kdWN0UGxhdGZvcm0gd291bGQgYmUgQ0FQLUVSIGFuZCB0aGUgaG9zdFBsYXRmb3JtXAogICAgICBcIHdvdWxkIGJlIE1pbmRUYXAiCiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2R1Y3RQbGF0Zm9ybSIKICBob3N0RW52aXJvbm1lbnQ6CiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogIHNlc3Npb25JZDoKICAgIHR5cGU6ICJzdHJpbmciCiAgICBtYXhMZW5ndGg6IDIwNDgKICAgIHBhdHRlcm46ICJeW0EtWmEtejAtOV9cXC5cXC1cXC8rPV0rJCIKICBldmVudElkOgogICAgdHlwZTogInN0cmluZyIKICAgIGRlc2NyaXB0aW9uOiAiQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBhY3Rpdml0eSByZWNvcmQgKE5PVCBmb3IgdGhlIGFjdGl2aXR5XAogICAgICBcIHRoZSB1c2VyIHdhcyB2aWV3aW5nKSIKICAgIG1heExlbmd0aDogMzYKICAgIHBhdHRlcm46ICJeW1xcdy1dKyQiCiAgdXNlclNTT0dVSUQ6CiAgICB0eXBlOiAic3RyaW5nIgogICAgbWluTGVuZ3RoOiAxCiAgICBtYXhMZW5ndGg6IDEwMAogICAgcGF0dGVybjogIl5bYS16QS1aMC05OlxcLXt9XXsxLDI1NX0kIgogIGV2ZW50VXJpOgogICAgdHlwZTogInN0cmluZyIKICAgIG1pbkxlbmd0aDogMQogICAgbWF4TGVuZ3RoOiAyMDQ4CiAgICBwYXR0ZXJuOiAiXigoW2EtekEtWl1bMC05YS16QS1aK1xcLVxcLl0qOik/L3swLDJ9WzAtOWEtekEtWjssLz86QCY9K1xcLlxcLV8hfionKCklXSspKCNbMC05YS16QS1aOywvPzpAJj0rXFxcCiAgICAgIC5cXC1fIX4qJygpJV0qKT8kIgogIHRhZ3M6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBkZXNjcmlwdGlvbjogIkFuIGFycmF5IG9mIGN1c3RvbSB0YWdzIGZ1cnRoZXIgZGVzY3JpYmluZyB0aGUgYWN0aXZpdHksIGUuZy4gYWN0aXZpdHlJZFwKICAgICAgXCBvciBjb3Vyc2VLZXkgb3IgY291cnNlQ0dJIgogICAgbWF4SXRlbXM6IDE1CiAgICBpdGVtczoKICAgICAgdHlwZTogIm9iamVjdCIKICAgICAgdGl0bGU6ICJBY3Rpdml0eVRhZyIKICAgICAgcHJvcGVydGllczoKICAgICAgICBrZXk6CiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgICAgbWF4TGVuZ3RoOiA0MAogICAgICAgICAgcGF0dGVybjogIl5bXFx3Xy1dKyQiCiAgICAgICAgdmFsdWU6CiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgICAgbWF4TGVuZ3RoOiAyNTYKICAgICAgICAgIHBhdHRlcm46ICJeW1xcdzsgLC8/OkAmPStcXC5cXC1fIX4qJygpJV0rJCIKICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCiAgICAgIHJlcXVpcmVkOgogICAgICAtICJrZXkiCiAgICAgIC0gInZhbHVlIgpyZXF1aXJlZDoKLSAibWVzc2FnZUZvcm1hdFZlcnNpb24iCi0gIm1lc3NhZ2VUeXBlIgotICJldmVudFRpbWUiCi0gImV2ZW50Q2F0ZWdvcnkiCi0gImV2ZW50QWN0aW9uIgotICJwcm9kdWN0RW52aXJvbm1lbnQiCi0gInByb2R1Y3RQbGF0Zm9ybSIKLSAic2Vzc2lvbklkIgotICJldmVudElkIgphZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UK\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIG1lc3NhZ2VGb3JtYXRWZXJzaW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGVudW06CiAgICAtIDEKICAgIGRlZmF1bHQ6IDEKICBtZXNzYWdlVHlwZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBlbnVtOgogICAgLSAiQ2xpZW50RXZlbnRpbmdBY3Rpdml0eSIKICAgIGRlZmF1bHQ6ICJDbGllbnRFdmVudGluZ0FjdGl2aXR5IgogIGV2ZW50VGltZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBkZXNjcmlwdGlvbjogIlRoZSB0aW1lIG9mIHRoZSBldmVudCwgYXMgZGVmaW5lZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNiIKICAgIGZvcm1hdDogImRhdGUtdGltZSIKICBldmVudER1cmF0aW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGRlc2NyaXB0aW9uOiAiSWYgYXBwbGljYWJsZSwgaG93IGxvbmcgdGhlIGV2ZW50IHRvb2suIgogICAgbWluaW11bTogMAogIGV2ZW50Q2F0ZWdvcnk6CiAgICB0eXBlOiAic3RyaW5nIgogICAgbWF4TGVuZ3RoOiA0MAogICAgcGF0dGVybjogIl5bXFx3LV0rJCIKICBldmVudEFjdGlvbjoKICAgIHR5cGU6ICJzdHJpbmciCiAgICBtYXhMZW5ndGg6IDQwCiAgICBwYXR0ZXJuOiAiXltcXHctXSskIgogIHByb2R1Y3RQbGF0Zm9ybToKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogIHByb2R1Y3RFbnZpcm9ubWVudDoKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgdXNlclBsYXRmb3JtOgogICAgJHJlZjogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS91c2VyUGxhdGZvcm0iCiAgdXNlckVudmlyb25tZW50OgogICAgJHJlZjogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9lbnZpcm9ubWVudCIKICBob3N0UGxhdGZvcm06CiAgICB0eXBlOiAic3RyaW5nIgogICAgZGVzY3JpcHRpb246ICJpZiB0aGUgcHJvZHVjdCBpcyBob3N0ZWQgd2l0aGluIGFub3RoZXIgcHJvZHVjdCwgYXMgYW4gaUZyYW1lIGZvclwKICAgICAgXCBleGFtcGxlLCB0aGUgcGxhdGZvcm1cbm9mIHRoZSBob3N0LCBlLmcuIGlmIHRoZSBDQVAtRVIgcHJvZHVjdCBpcyBob3N0ZWQgaW5cCiAgICAgIFwgYW4gaWZyYW1lIHdpdGggTWluZFRhcCxcbnRoZSBwcm9kdWN0UGxhdGZvcm0gd291bGQgYmUgQ0FQLUVSIGFuZCB0aGUgaG9zdFBsYXRmb3JtXAogICAgICBcIHdvdWxkIGJlIE1pbmRUYXAiCiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2R1Y3RQbGF0Zm9ybSIKICBob3N0RW52aXJvbm1lbnQ6CiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogIHNlc3Npb25JZDoKICAgIHR5cGU6ICJzdHJpbmciCiAgICBtYXhMZW5ndGg6IDIwNDgKICAgIHBhdHRlcm46ICJeW0EtWmEtejAtOV9cXC5cXC1cXC8rPV0rJCIKICBldmVudElkOgogICAgdHlwZTogInN0cmluZyIKICAgIGRlc2NyaXB0aW9uOiAiQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBhY3Rpdml0eSByZWNvcmQgKE5PVCBmb3IgdGhlIGFjdGl2aXR5XAogICAgICBcIHRoZSB1c2VyIHdhcyB2aWV3aW5nKSIKICAgIG1heExlbmd0aDogMzYKICAgIHBhdHRlcm46ICJeW1xcdy1dKyQiCiAgdXNlclNTT0dVSUQ6CiAgICB0eXBlOiAic3RyaW5nIgogICAgbWluTGVuZ3RoOiAxCiAgICBtYXhMZW5ndGg6IDEwMAogICAgcGF0dGVybjogIl5bYS16QS1aMC05OlxcLXt9XXsxLDI1NX0kIgogIGV2ZW50VXJpOgogICAgdHlwZTogInN0cmluZyIKICAgIG1pbkxlbmd0aDogMQogICAgbWF4TGVuZ3RoOiAyMDQ4CiAgICBwYXR0ZXJuOiAiXigoW2EtekEtWl1bMC05YS16QS1aK1xcLVxcLl0qOik/L3swLDJ9WzAtOWEtekEtWjssLz86QCY9K1xcLlxcLV8hfionKCklXSspKCNbMC05YS16QS1aOywvPzpAJj0rXFxcCiAgICAgIC5cXC1fIX4qJygpJV0qKT8kIgogIHRhZ3M6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBkZXNjcmlwdGlvbjogIkFuIGFycmF5IG9mIGN1c3RvbSB0YWdzIGZ1cnRoZXIgZGVzY3JpYmluZyB0aGUgYWN0aXZpdHksIGUuZy4gYWN0aXZpdHlJZFwKICAgICAgXCBvciBjb3Vyc2VLZXkgb3IgY291cnNlQ0dJIgogICAgbWF4SXRlbXM6IDE1CiAgICBpdGVtczoKICAgICAgdHlwZTogIm9iamVjdCIKICAgICAgdGl0bGU6ICJBY3Rpdml0eVRhZyIKICAgICAgcHJvcGVydGllczoKICAgICAgICBrZXk6CiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgICAgbWF4TGVuZ3RoOiA0MAogICAgICAgICAgcGF0dGVybjogIl5bXFx3Xy1dKyQiCiAgICAgICAgdmFsdWU6CiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgICAgbWF4TGVuZ3RoOiAyNTYKICAgICAgICAgIHBhdHRlcm46ICJeW1xcdzsgLC8/OkAmPStcXC5cXC1fIX4qJygpJV0rJCIKICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCiAgICAgIHJlcXVpcmVkOgogICAgICAtICJrZXkiCiAgICAgIC0gInZhbHVlIgpyZXF1aXJlZDoKLSAibWVzc2FnZUZvcm1hdFZlcnNpb24iCi0gIm1lc3NhZ2VUeXBlIgotICJldmVudFRpbWUiCi0gImV2ZW50Q2F0ZWdvcnkiCi0gImV2ZW50QWN0aW9uIgotICJwcm9kdWN0RW52aXJvbm1lbnQiCi0gInByb2R1Y3RQbGF0Zm9ybSIKLSAic2Vzc2lvbklkIgotICJldmVudElkIgphZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UK\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/environment:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJzdHJpbmciLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgZW52aXJvbm1lbnQiLAogICJ0aXRsZSIgOiAiZW52aXJvbm1lbnQiLAogICJlbnVtIiA6IFsgInByb2R1Y3Rpb24iLCAic3RhZ2luZyIsICJwZXJmb3JtYW5jZSIsICJsb2FkIiwgInFhIiwgImludGVncmF0aW9uIiwgImRldmVsb3AiLCAibW9uaXRvcmluZyIsICJkZW1vIiwgImVkaXRvcmlhbCIgXQp9\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJzdHJpbmciLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgZW52aXJvbm1lbnQiLAogICJ0aXRsZSIgOiAiZW52aXJvbm1lbnQiLAogICJlbnVtIiA6IFsgInByb2R1Y3Rpb24iLCAic3RhZ2luZyIsICJwZXJmb3JtYW5jZSIsICJsb2FkIiwgInFhIiwgImludGVncmF0aW9uIiwgImRldmVsb3AiLCAibW9uaXRvcmluZyIsICJkZW1vIiwgImVkaXRvcmlhbCIgXQp9\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJzdHJpbmciCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpkZXNjcmlwdGlvbjogInRoZSBlbnZpcm9ubWVudCIKdGl0bGU6ICJlbnZpcm9ubWVudCIKZW51bToKLSAicHJvZHVjdGlvbiIKLSAic3RhZ2luZyIKLSAicGVyZm9ybWFuY2UiCi0gImxvYWQiCi0gInFhIgotICJpbnRlZ3JhdGlvbiIKLSAiZGV2ZWxvcCIKLSAibW9uaXRvcmluZyIKLSAiZGVtbyIKLSAiZWRpdG9yaWFsIgo=\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJzdHJpbmciCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpkZXNjcmlwdGlvbjogInRoZSBlbnZpcm9ubWVudCIKdGl0bGU6ICJlbnZpcm9ubWVudCIKZW51bToKLSAicHJvZHVjdGlvbiIKLSAic3RhZ2luZyIKLSAicGVyZm9ybWFuY2UiCi0gImxvYWQiCi0gInFhIgotICJpbnRlZ3JhdGlvbiIKLSAiZGV2ZWxvcCIKLSAibW9uaXRvcmluZyIKLSAiZGVtbyIKLSAiZWRpdG9yaWFsIgo=\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /ip:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Cloudfront-Viewer-Country:
                      schema:
                        type: "string"
                    X-Forwarded-For:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {"ip": "$context.identity.sourceIp"}
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/activityRecords:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgInJlY29yZHMiIDogewogICAgICAidHlwZSIgOiAiYXJyYXkiLAogICAgICAibWluSXRlbXMiIDogMSwKICAgICAgIm1heEl0ZW1zIiA6IDUwMCwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2FjdGl2aXR5IgogICAgICB9CiAgICB9CiAgfSwKICAicmVxdWlyZWQiIDogWyAicmVjb3JkcyIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgInJlY29yZHMiIDogewogICAgICAidHlwZSIgOiAiYXJyYXkiLAogICAgICAibWluSXRlbXMiIDogMSwKICAgICAgIm1heEl0ZW1zIiA6IDUwMCwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2FjdGl2aXR5IgogICAgICB9CiAgICB9CiAgfSwKICAicmVxdWlyZWQiIDogWyAicmVjb3JkcyIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIHJlY29yZHM6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBtaW5JdGVtczogMQogICAgbWF4SXRlbXM6IDUwMAogICAgaXRlbXM6CiAgICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvYWN0aXZpdHkiCnJlcXVpcmVkOgotICJyZWNvcmRzIgphZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UK\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIHJlY29yZHM6CiAgICB0eXBlOiAiYXJyYXkiCiAgICBtaW5JdGVtczogMQogICAgbWF4SXRlbXM6IDUwMAogICAgaXRlbXM6CiAgICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvYWN0aXZpdHkiCnJlcXVpcmVkOgotICJyZWNvcmRzIgphZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UK\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/ip:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgImlwIiA6IHsKICAgICAgImFueU9mIiA6IFsgewogICAgICAgICJmb3JtYXQiIDogImlwdjQiLAogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgIH0sIHsKICAgICAgICAiZm9ybWF0IiA6ICJpcHY2IiwKICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICB9IF0KICAgIH0KICB9LAogICJyZXF1aXJlZCIgOiBbICJpcCIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgImlwIiA6IHsKICAgICAgImFueU9mIiA6IFsgewogICAgICAgICJmb3JtYXQiIDogImlwdjQiLAogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgIH0sIHsKICAgICAgICAiZm9ybWF0IiA6ICJpcHY2IiwKICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICB9IF0KICAgIH0KICB9LAogICJyZXF1aXJlZCIgOiBbICJpcCIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIGlwOgogICAgYW55T2Y6CiAgICAtIGZvcm1hdDogImlwdjQiCiAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAtIGZvcm1hdDogImlwdjYiCiAgICAgIHR5cGU6ICJzdHJpbmciCnJlcXVpcmVkOgotICJpcCIKYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCg==\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIGlwOgogICAgYW55T2Y6CiAgICAtIGZvcm1hdDogImlwdjQiCiAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAtIGZvcm1hdDogImlwdjYiCiAgICAgIHR5cGU6ICJzdHJpbmciCnJlcXVpcmVkOgotICJpcCIKYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlCg==\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schema/profile:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICJlbnVtIiA6IFsgMSBdLAogICAgICAiZGVmYXVsdCIgOiAxCiAgICB9LAogICAgIm1lc3NhZ2VUeXBlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkNsaWVudEV2ZW50aW5nUHJvZmlsZSIgXSwKICAgICAgImRlZmF1bHQiIDogIkNsaWVudEV2ZW50aW5nUHJvZmlsZSIKICAgIH0sCiAgICAicHJvZHVjdFBsYXRmb3JtIiA6IHsKICAgICAgIiRyZWYiIDogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9wcm9kdWN0UGxhdGZvcm0iCiAgICB9LAogICAgInByb2R1Y3RFbnZpcm9ubWVudCIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgICB9LAogICAgImhvc3RQbGF0Zm9ybSIgOiB7CiAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iIDogImlmIHRoZSBwcm9kdWN0IGlzIGhvc3RlZCB3aXRoaW4gYW5vdGhlciBwcm9kdWN0LCBhcyBhbiBpRnJhbWUgZm9yIGV4YW1wbGUsIHRoZSBwbGF0Zm9ybVxub2YgdGhlIGhvc3QsIGUuZy4gaWYgdGhlIENBUC1FUiBwcm9kdWN0IGlzIGhvc3RlZCBpbiBhbiBpZnJhbWUgd2l0aCBNaW5kVGFwLFxudGhlIHByb2R1Y3RQbGF0Zm9ybSB3b3VsZCBiZSBDQVAtRVIgYW5kIHRoZSBob3N0UGxhdGZvcm0gd291bGQgYmUgTWluZFRhcCIsCiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogICAgfSwKICAgICJob3N0RW52aXJvbm1lbnQiIDogewogICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogICAgfSwKICAgICJzZXNzaW9uSWQiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiAyMDQ4LAogICAgICAicGF0dGVybiIgOiAiXltBLVphLXowLTlfXFwuXFwtXFwvKz1dKyQiCiAgICB9LAogICAgImV2ZW50VGltZSIgOiB7CiAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSB0aW1lIG9mIHRoZSBldmVudCwgYXMgZGVmaW5lZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNiIsCiAgICAgICJmb3JtYXQiIDogImRhdGUtdGltZSIKICAgIH0sCiAgICAicGxhdGZvcm0iIDogewogICAgICAidGl0bGUiIDogIlBsYXRmb3JtIiwKICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAidXNlckFnZW50U3RyaW5nIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA0MDk2CiAgICAgICAgfSwKICAgICAgICAiYnJvd3NlckZpbmdlcnByaW50IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeWzAtOWEtZl0rJCIKICAgICAgICB9LAogICAgICAgICJicm93c2VyTmFtZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImJyb3dzZXJWZXJzaW9uIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgICAgfSwKICAgICAgICAib3NOYW1lIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgICAgfSwKICAgICAgICAib3NWZXJzaW9uIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgICAgfSwKICAgICAgICAib3NWZXJzaW9uTmFtZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImVuZ2luZU5hbWUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJwbGF0Zm9ybVR5cGUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJwbGF0Zm9ybVZlbmRvciIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImxhbmd1YWdlIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiAxMCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcKFxcKSBBLVphLXotXXsxLDEwfSQiCiAgICAgICAgfSwKICAgICAgICAic2NyZWVuUmVzb2x1dGlvbiIgOiB7CiAgICAgICAgICAidGl0bGUiIDogIlNjcmVlblJlc29sdXRpb24iLAogICAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAgICJ3aWR0aCIgOiB7CiAgICAgICAgICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICAgICAgICAgIm1pbmltdW0iIDogMCwKICAgICAgICAgICAgICAibWF4aW11bSIgOiAyMTQ3NDgzNjQ3CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJoZWlnaHQiIDogewogICAgICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiLAogICAgICAgICAgICAgICJtaW5pbXVtIiA6IDAsCiAgICAgICAgICAgICAgIm1heGltdW0iIDogMjE0NzQ4MzY0NwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInJlcXVpcmVkIiA6IFsgIndpZHRoIiwgImhlaWdodCIgXSwKICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQogICAgICAgIH0KICAgICAgfSwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlCiAgICB9LAogICAgImxvY2F0aW9uIiA6IHsKICAgICAgInRpdGxlIiA6ICJHZW9Mb2NhdGlvbiIsCiAgICAgICJ0eXBlIiA6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgImlwQWRkcmVzcyIgOiB7CiAgICAgICAgICAiYW55T2YiIDogWyB7CiAgICAgICAgICAgICJmb3JtYXQiIDogImlwdjQiLAogICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgfSwgewogICAgICAgICAgICAiZm9ybWF0IiA6ICJpcHY2IiwKICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgIH0gXQogICAgICAgIH0sCiAgICAgICAgImlwQWRkcmVzc0ZhaWx1cmUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJsYXRpdHVkZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIiwKICAgICAgICAgICJtaW5pbXVtIiA6IC05MCwKICAgICAgICAgICJtYXhpbXVtIiA6IDkwCiAgICAgICAgfSwKICAgICAgICAibG9uZ2l0dWRlIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiLAogICAgICAgICAgIm1pbmltdW0iIDogLTE4MCwKICAgICAgICAgICJtYXhpbXVtIiA6IDE4MAogICAgICAgIH0sCiAgICAgICAgImFjY3VyYWN5IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiLAogICAgICAgICAgIm1pbmltdW0iIDogLTIxNDc0ODM2NDgsCiAgICAgICAgICAibWF4aW11bSIgOiAyMTQ3NDgzNjQ3CiAgICAgICAgfSwKICAgICAgICAibGF0TG9uZ0ZhaWx1cmUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJjb3VudHJ5IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiAxMCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcKFxcKSBBLVphLXotXXsxLDEwfSQiCiAgICAgICAgfSwKICAgICAgICAiY2l0eSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgInNlcnZpY2VQcm92aWRlciIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImxvY2F0aW9uRmFpbHVyZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgInRpbWVab25lIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8vKy1dezEsNjR9JCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiwgIm1lc3NhZ2VUeXBlIiwgInByb2R1Y3RFbnZpcm9ubWVudCIsICJwcm9kdWN0UGxhdGZvcm0iLCAiZXZlbnRUaW1lIiwgInNlc3Npb25JZCIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/schema+json: "$util.base64Decode(\"ewogICJ0eXBlIiA6ICJvYmplY3QiLAogICJkZWZpbml0aW9ucyIgOiB7IH0sCiAgIiRzY2hlbWEiIDogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInByb3BlcnRpZXMiIDogewogICAgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiA6IHsKICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICJlbnVtIiA6IFsgMSBdLAogICAgICAiZGVmYXVsdCIgOiAxCiAgICB9LAogICAgIm1lc3NhZ2VUeXBlIiA6IHsKICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICJlbnVtIiA6IFsgIkNsaWVudEV2ZW50aW5nUHJvZmlsZSIgXSwKICAgICAgImRlZmF1bHQiIDogIkNsaWVudEV2ZW50aW5nUHJvZmlsZSIKICAgIH0sCiAgICAicHJvZHVjdFBsYXRmb3JtIiA6IHsKICAgICAgIiRyZWYiIDogImh0dHBzOi8vYW5hbHl0aWNzLWNsaWVudC1ldmVudGluZy1zdGFnaW5nMDEuY2VuZ2FnZS5pbmZvL3YxL3NjaGVtYS9wcm9kdWN0UGxhdGZvcm0iCiAgICB9LAogICAgInByb2R1Y3RFbnZpcm9ubWVudCIgOiB7CiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgICB9LAogICAgImhvc3RQbGF0Zm9ybSIgOiB7CiAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iIDogImlmIHRoZSBwcm9kdWN0IGlzIGhvc3RlZCB3aXRoaW4gYW5vdGhlciBwcm9kdWN0LCBhcyBhbiBpRnJhbWUgZm9yIGV4YW1wbGUsIHRoZSBwbGF0Zm9ybVxub2YgdGhlIGhvc3QsIGUuZy4gaWYgdGhlIENBUC1FUiBwcm9kdWN0IGlzIGhvc3RlZCBpbiBhbiBpZnJhbWUgd2l0aCBNaW5kVGFwLFxudGhlIHByb2R1Y3RQbGF0Zm9ybSB3b3VsZCBiZSBDQVAtRVIgYW5kIHRoZSBob3N0UGxhdGZvcm0gd291bGQgYmUgTWluZFRhcCIsCiAgICAgICIkcmVmIiA6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogICAgfSwKICAgICJob3N0RW52aXJvbm1lbnQiIDogewogICAgICAiJHJlZiIgOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogICAgfSwKICAgICJzZXNzaW9uSWQiIDogewogICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgIm1heExlbmd0aCIgOiAyMDQ4LAogICAgICAicGF0dGVybiIgOiAiXltBLVphLXowLTlfXFwuXFwtXFwvKz1dKyQiCiAgICB9LAogICAgImV2ZW50VGltZSIgOiB7CiAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSB0aW1lIG9mIHRoZSBldmVudCwgYXMgZGVmaW5lZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNiIsCiAgICAgICJmb3JtYXQiIDogImRhdGUtdGltZSIKICAgIH0sCiAgICAicGxhdGZvcm0iIDogewogICAgICAidGl0bGUiIDogIlBsYXRmb3JtIiwKICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAidXNlckFnZW50U3RyaW5nIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA0MDk2CiAgICAgICAgfSwKICAgICAgICAiYnJvd3NlckZpbmdlcnByaW50IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeWzAtOWEtZl0rJCIKICAgICAgICB9LAogICAgICAgICJicm93c2VyTmFtZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImJyb3dzZXJWZXJzaW9uIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgICAgfSwKICAgICAgICAib3NOYW1lIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgICAgfSwKICAgICAgICAib3NWZXJzaW9uIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgICAgfSwKICAgICAgICAib3NWZXJzaW9uTmFtZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImVuZ2luZU5hbWUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJwbGF0Zm9ybVR5cGUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJwbGF0Zm9ybVZlbmRvciIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImxhbmd1YWdlIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiAxMCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcKFxcKSBBLVphLXotXXsxLDEwfSQiCiAgICAgICAgfSwKICAgICAgICAic2NyZWVuUmVzb2x1dGlvbiIgOiB7CiAgICAgICAgICAidGl0bGUiIDogIlNjcmVlblJlc29sdXRpb24iLAogICAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAgICJ3aWR0aCIgOiB7CiAgICAgICAgICAgICAgInR5cGUiIDogIm51bWJlciIsCiAgICAgICAgICAgICAgIm1pbmltdW0iIDogMCwKICAgICAgICAgICAgICAibWF4aW11bSIgOiAyMTQ3NDgzNjQ3CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJoZWlnaHQiIDogewogICAgICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiLAogICAgICAgICAgICAgICJtaW5pbXVtIiA6IDAsCiAgICAgICAgICAgICAgIm1heGltdW0iIDogMjE0NzQ4MzY0NwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInJlcXVpcmVkIiA6IFsgIndpZHRoIiwgImhlaWdodCIgXSwKICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQogICAgICAgIH0KICAgICAgfSwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiA6IGZhbHNlCiAgICB9LAogICAgImxvY2F0aW9uIiA6IHsKICAgICAgInRpdGxlIiA6ICJHZW9Mb2NhdGlvbiIsCiAgICAgICJ0eXBlIiA6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgImlwQWRkcmVzcyIgOiB7CiAgICAgICAgICAiYW55T2YiIDogWyB7CiAgICAgICAgICAgICJmb3JtYXQiIDogImlwdjQiLAogICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgfSwgewogICAgICAgICAgICAiZm9ybWF0IiA6ICJpcHY2IiwKICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgIH0gXQogICAgICAgIH0sCiAgICAgICAgImlwQWRkcmVzc0ZhaWx1cmUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJsYXRpdHVkZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIiwKICAgICAgICAgICJtaW5pbXVtIiA6IC05MCwKICAgICAgICAgICJtYXhpbXVtIiA6IDkwCiAgICAgICAgfSwKICAgICAgICAibG9uZ2l0dWRlIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiLAogICAgICAgICAgIm1pbmltdW0iIDogLTE4MCwKICAgICAgICAgICJtYXhpbXVtIiA6IDE4MAogICAgICAgIH0sCiAgICAgICAgImFjY3VyYWN5IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiLAogICAgICAgICAgIm1pbmltdW0iIDogLTIxNDc0ODM2NDgsCiAgICAgICAgICAibWF4aW11bSIgOiAyMTQ3NDgzNjQ3CiAgICAgICAgfSwKICAgICAgICAibGF0TG9uZ0ZhaWx1cmUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAibWF4TGVuZ3RoIiA6IDY0LAogICAgICAgICAgInBhdHRlcm4iIDogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgICB9LAogICAgICAgICJjb3VudHJ5IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiAxMCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcKFxcKSBBLVphLXotXXsxLDEwfSQiCiAgICAgICAgfSwKICAgICAgICAiY2l0eSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgInNlcnZpY2VQcm92aWRlciIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgImxvY2F0aW9uRmFpbHVyZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICJtYXhMZW5ndGgiIDogNjQsCiAgICAgICAgICAicGF0dGVybiIgOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICAgIH0sCiAgICAgICAgInRpbWVab25lIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgIm1heExlbmd0aCIgOiA2NCwKICAgICAgICAgICJwYXR0ZXJuIiA6ICJeW1xcdzouIF8vKy1dezEsNjR9JCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyIgOiBmYWxzZQogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIiwgIm1lc3NhZ2VUeXBlIiwgInByb2R1Y3RFbnZpcm9ubWVudCIsICJwcm9kdWN0UGxhdGZvcm0iLCAiZXZlbnRUaW1lIiwgInNlc3Npb25JZCIgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiIDogZmFsc2UKfQ==\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIG1lc3NhZ2VGb3JtYXRWZXJzaW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGVudW06CiAgICAtIDEKICAgIGRlZmF1bHQ6IDEKICBtZXNzYWdlVHlwZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBlbnVtOgogICAgLSAiQ2xpZW50RXZlbnRpbmdQcm9maWxlIgogICAgZGVmYXVsdDogIkNsaWVudEV2ZW50aW5nUHJvZmlsZSIKICBwcm9kdWN0UGxhdGZvcm06CiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2R1Y3RQbGF0Zm9ybSIKICBwcm9kdWN0RW52aXJvbm1lbnQ6CiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogIGhvc3RQbGF0Zm9ybToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBkZXNjcmlwdGlvbjogImlmIHRoZSBwcm9kdWN0IGlzIGhvc3RlZCB3aXRoaW4gYW5vdGhlciBwcm9kdWN0LCBhcyBhbiBpRnJhbWUgZm9yXAogICAgICBcIGV4YW1wbGUsIHRoZSBwbGF0Zm9ybVxub2YgdGhlIGhvc3QsIGUuZy4gaWYgdGhlIENBUC1FUiBwcm9kdWN0IGlzIGhvc3RlZCBpblwKICAgICAgXCBhbiBpZnJhbWUgd2l0aCBNaW5kVGFwLFxudGhlIHByb2R1Y3RQbGF0Zm9ybSB3b3VsZCBiZSBDQVAtRVIgYW5kIHRoZSBob3N0UGxhdGZvcm1cCiAgICAgIFwgd291bGQgYmUgTWluZFRhcCIKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogIGhvc3RFbnZpcm9ubWVudDoKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgc2Vzc2lvbklkOgogICAgdHlwZTogInN0cmluZyIKICAgIG1heExlbmd0aDogMjA0OAogICAgcGF0dGVybjogIl5bQS1aYS16MC05X1xcLlxcLVxcLys9XSskIgogIGV2ZW50VGltZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBkZXNjcmlwdGlvbjogIlRoZSB0aW1lIG9mIHRoZSBldmVudCwgYXMgZGVmaW5lZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNiIKICAgIGZvcm1hdDogImRhdGUtdGltZSIKICBwbGF0Zm9ybToKICAgIHRpdGxlOiAiUGxhdGZvcm0iCiAgICB0eXBlOiAib2JqZWN0IgogICAgcHJvcGVydGllczoKICAgICAgdXNlckFnZW50U3RyaW5nOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA0MDk2CiAgICAgIGJyb3dzZXJGaW5nZXJwcmludDoKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXlswLTlhLWZdKyQiCiAgICAgIGJyb3dzZXJOYW1lOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIGJyb3dzZXJWZXJzaW9uOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIG9zTmFtZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBvc1ZlcnNpb246CiAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICBtYXhMZW5ndGg6IDY0CiAgICAgICAgcGF0dGVybjogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgb3NWZXJzaW9uTmFtZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBlbmdpbmVOYW1lOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIHBsYXRmb3JtVHlwZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBwbGF0Zm9ybVZlbmRvcjoKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBsYW5ndWFnZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogMTAKICAgICAgICBwYXR0ZXJuOiAiXltcXChcXCkgQS1aYS16LV17MSwxMH0kIgogICAgICBzY3JlZW5SZXNvbHV0aW9uOgogICAgICAgIHRpdGxlOiAiU2NyZWVuUmVzb2x1dGlvbiIKICAgICAgICB0eXBlOiAib2JqZWN0IgogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICB3aWR0aDoKICAgICAgICAgICAgdHlwZTogIm51bWJlciIKICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICBtYXhpbXVtOiAyMTQ3NDgzNjQ3CiAgICAgICAgICBoZWlnaHQ6CiAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiCiAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgbWF4aW11bTogMjE0NzQ4MzY0NwogICAgICAgIHJlcXVpcmVkOgogICAgICAgIC0gIndpZHRoIgogICAgICAgIC0gImhlaWdodCIKICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UKICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQogIGxvY2F0aW9uOgogICAgdGl0bGU6ICJHZW9Mb2NhdGlvbiIKICAgIHR5cGU6ICJvYmplY3QiCiAgICBwcm9wZXJ0aWVzOgogICAgICBpcEFkZHJlc3M6CiAgICAgICAgYW55T2Y6CiAgICAgICAgLSBmb3JtYXQ6ICJpcHY0IgogICAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICAtIGZvcm1hdDogImlwdjYiCiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICBpcEFkZHJlc3NGYWlsdXJlOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIGxhdGl0dWRlOgogICAgICAgIHR5cGU6ICJudW1iZXIiCiAgICAgICAgbWluaW11bTogLTkwCiAgICAgICAgbWF4aW11bTogOTAKICAgICAgbG9uZ2l0dWRlOgogICAgICAgIHR5cGU6ICJudW1iZXIiCiAgICAgICAgbWluaW11bTogLTE4MAogICAgICAgIG1heGltdW06IDE4MAogICAgICBhY2N1cmFjeToKICAgICAgICB0eXBlOiAibnVtYmVyIgogICAgICAgIG1pbmltdW06IC0yMTQ3NDgzNjQ4CiAgICAgICAgbWF4aW11bTogMjE0NzQ4MzY0NwogICAgICBsYXRMb25nRmFpbHVyZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBjb3VudHJ5OgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiAxMAogICAgICAgIHBhdHRlcm46ICJeW1xcKFxcKSBBLVphLXotXXsxLDEwfSQiCiAgICAgIGNpdHk6CiAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICBtYXhMZW5ndGg6IDY0CiAgICAgICAgcGF0dGVybjogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgc2VydmljZVByb3ZpZGVyOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIGxvY2F0aW9uRmFpbHVyZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICB0aW1lWm9uZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLystXXsxLDY0fSQiCiAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UKcmVxdWlyZWQ6Ci0gIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIgotICJtZXNzYWdlVHlwZSIKLSAicHJvZHVjdEVudmlyb25tZW50IgotICJwcm9kdWN0UGxhdGZvcm0iCi0gImV2ZW50VGltZSIKLSAic2Vzc2lvbklkIgphZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UK\")"
                      application/yaml: "$util.base64Decode(\"LS0tCnR5cGU6ICJvYmplY3QiCmRlZmluaXRpb25zOiB7fQokc2NoZW1hOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIgpwcm9wZXJ0aWVzOgogIG1lc3NhZ2VGb3JtYXRWZXJzaW9uOgogICAgdHlwZTogIm51bWJlciIKICAgIGVudW06CiAgICAtIDEKICAgIGRlZmF1bHQ6IDEKICBtZXNzYWdlVHlwZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBlbnVtOgogICAgLSAiQ2xpZW50RXZlbnRpbmdQcm9maWxlIgogICAgZGVmYXVsdDogIkNsaWVudEV2ZW50aW5nUHJvZmlsZSIKICBwcm9kdWN0UGxhdGZvcm06CiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL3Byb2R1Y3RQbGF0Zm9ybSIKICBwcm9kdWN0RW52aXJvbm1lbnQ6CiAgICAkcmVmOiAiaHR0cHM6Ly9hbmFseXRpY3MtY2xpZW50LWV2ZW50aW5nLXN0YWdpbmcwMS5jZW5nYWdlLmluZm8vdjEvc2NoZW1hL2Vudmlyb25tZW50IgogIGhvc3RQbGF0Zm9ybToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBkZXNjcmlwdGlvbjogImlmIHRoZSBwcm9kdWN0IGlzIGhvc3RlZCB3aXRoaW4gYW5vdGhlciBwcm9kdWN0LCBhcyBhbiBpRnJhbWUgZm9yXAogICAgICBcIGV4YW1wbGUsIHRoZSBwbGF0Zm9ybVxub2YgdGhlIGhvc3QsIGUuZy4gaWYgdGhlIENBUC1FUiBwcm9kdWN0IGlzIGhvc3RlZCBpblwKICAgICAgXCBhbiBpZnJhbWUgd2l0aCBNaW5kVGFwLFxudGhlIHByb2R1Y3RQbGF0Zm9ybSB3b3VsZCBiZSBDQVAtRVIgYW5kIHRoZSBob3N0UGxhdGZvcm1cCiAgICAgIFwgd291bGQgYmUgTWluZFRhcCIKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvcHJvZHVjdFBsYXRmb3JtIgogIGhvc3RFbnZpcm9ubWVudDoKICAgICRyZWY6ICJodHRwczovL2FuYWx5dGljcy1jbGllbnQtZXZlbnRpbmctc3RhZ2luZzAxLmNlbmdhZ2UuaW5mby92MS9zY2hlbWEvZW52aXJvbm1lbnQiCiAgc2Vzc2lvbklkOgogICAgdHlwZTogInN0cmluZyIKICAgIG1heExlbmd0aDogMjA0OAogICAgcGF0dGVybjogIl5bQS1aYS16MC05X1xcLlxcLVxcLys9XSskIgogIGV2ZW50VGltZToKICAgIHR5cGU6ICJzdHJpbmciCiAgICBkZXNjcmlwdGlvbjogIlRoZSB0aW1lIG9mIHRoZSBldmVudCwgYXMgZGVmaW5lZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNiIKICAgIGZvcm1hdDogImRhdGUtdGltZSIKICBwbGF0Zm9ybToKICAgIHRpdGxlOiAiUGxhdGZvcm0iCiAgICB0eXBlOiAib2JqZWN0IgogICAgcHJvcGVydGllczoKICAgICAgdXNlckFnZW50U3RyaW5nOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA0MDk2CiAgICAgIGJyb3dzZXJGaW5nZXJwcmludDoKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXlswLTlhLWZdKyQiCiAgICAgIGJyb3dzZXJOYW1lOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIGJyb3dzZXJWZXJzaW9uOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIG9zTmFtZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBvc1ZlcnNpb246CiAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICBtYXhMZW5ndGg6IDY0CiAgICAgICAgcGF0dGVybjogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgb3NWZXJzaW9uTmFtZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBlbmdpbmVOYW1lOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIHBsYXRmb3JtVHlwZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBwbGF0Zm9ybVZlbmRvcjoKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBsYW5ndWFnZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogMTAKICAgICAgICBwYXR0ZXJuOiAiXltcXChcXCkgQS1aYS16LV17MSwxMH0kIgogICAgICBzY3JlZW5SZXNvbHV0aW9uOgogICAgICAgIHRpdGxlOiAiU2NyZWVuUmVzb2x1dGlvbiIKICAgICAgICB0eXBlOiAib2JqZWN0IgogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICB3aWR0aDoKICAgICAgICAgICAgdHlwZTogIm51bWJlciIKICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICBtYXhpbXVtOiAyMTQ3NDgzNjQ3CiAgICAgICAgICBoZWlnaHQ6CiAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiCiAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgbWF4aW11bTogMjE0NzQ4MzY0NwogICAgICAgIHJlcXVpcmVkOgogICAgICAgIC0gIndpZHRoIgogICAgICAgIC0gImhlaWdodCIKICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UKICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZQogIGxvY2F0aW9uOgogICAgdGl0bGU6ICJHZW9Mb2NhdGlvbiIKICAgIHR5cGU6ICJvYmplY3QiCiAgICBwcm9wZXJ0aWVzOgogICAgICBpcEFkZHJlc3M6CiAgICAgICAgYW55T2Y6CiAgICAgICAgLSBmb3JtYXQ6ICJpcHY0IgogICAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICAtIGZvcm1hdDogImlwdjYiCiAgICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICBpcEFkZHJlc3NGYWlsdXJlOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIGxhdGl0dWRlOgogICAgICAgIHR5cGU6ICJudW1iZXIiCiAgICAgICAgbWluaW11bTogLTkwCiAgICAgICAgbWF4aW11bTogOTAKICAgICAgbG9uZ2l0dWRlOgogICAgICAgIHR5cGU6ICJudW1iZXIiCiAgICAgICAgbWluaW11bTogLTE4MAogICAgICAgIG1heGltdW06IDE4MAogICAgICBhY2N1cmFjeToKICAgICAgICB0eXBlOiAibnVtYmVyIgogICAgICAgIG1pbmltdW06IC0yMTQ3NDgzNjQ4CiAgICAgICAgbWF4aW11bTogMjE0NzQ4MzY0NwogICAgICBsYXRMb25nRmFpbHVyZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICBjb3VudHJ5OgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiAxMAogICAgICAgIHBhdHRlcm46ICJeW1xcKFxcKSBBLVphLXotXXsxLDEwfSQiCiAgICAgIGNpdHk6CiAgICAgICAgdHlwZTogInN0cmluZyIKICAgICAgICBtYXhMZW5ndGg6IDY0CiAgICAgICAgcGF0dGVybjogIl5bXFx3Oi4gXy1dezEsNjR9JCIKICAgICAgc2VydmljZVByb3ZpZGVyOgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgbWF4TGVuZ3RoOiA2NAogICAgICAgIHBhdHRlcm46ICJeW1xcdzouIF8tXXsxLDY0fSQiCiAgICAgIGxvY2F0aW9uRmFpbHVyZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLV17MSw2NH0kIgogICAgICB0aW1lWm9uZToKICAgICAgICB0eXBlOiAic3RyaW5nIgogICAgICAgIG1heExlbmd0aDogNjQKICAgICAgICBwYXR0ZXJuOiAiXltcXHc6LiBfLystXXsxLDY0fSQiCiAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UKcmVxdWlyZWQ6Ci0gIm1lc3NhZ2VGb3JtYXRWZXJzaW9uIgotICJtZXNzYWdlVHlwZSIKLSAicHJvZHVjdEVudmlyb25tZW50IgotICJwcm9kdWN0UGxhdGZvcm0iCi0gImV2ZW50VGltZSIKLSAic2Vzc2lvbklkIgphZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UK\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /profile:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/profileRecords"
                required: true
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt cafeApiGatewayRole.Arn
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
                responses:
                  4\d{2}:
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "Error": "400",
                          "response": "$input.body"
                        }
                  default:
                    statusCode: "500"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "Error": "500",
                          "response": "$input.body"
                        }
                  2\d{2}:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: >-
                        {
                          "failedRequests": $input.path('$.FailedPutCount'),
                          "individualStatus": [
                          #foreach($elem in $input.path('$.RequestResponses'))
                            {
                            #if(!$elem.ErrorCode)
                              "errorCode": "$elem.ErrorCode", #end
                            #if(!$elem.ErrorMessage)
                              "errorMessage": "$elem.ErrorMessage", #end
                              "recordId": "$elem.RecordId"
                            }#if($foreach.hasNext),#end
                          #end
                          ]
                        }
                requestParameters:
                  integration.request.header.Content-Type: "'application/json'"
                passthroughBehavior: "never"
                httpMethod: "POST"
                requestTemplates:
                  application/json: >-
                    #set( $nl = "
                    " )
                    #set($records = $input.path('$.records'))
                    {
                    "DeliveryStreamName": "cafe-profile",
                      "Records": [
                      #foreach($elem in $records)
                        #set( $idx = $foreach.count - 1)
                        #set( $f = "$.records[$idx]" )
                        #set( $j = $input.json($f) )
                        #set( $n = "$j$nl" )
                        { "Data": "$util.base64Encode($n)" } #if($foreach.hasNext),#end
                      #end
                      ]
                    }
                type: "aws"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /schemas:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$util.base64Decode(\"WyJpcCIsImFjdGl2aXR5UmVjb3JkcyIsInVzZXJQbGF0Zm9ybSIsImxvZ1JlY29yZHMiLCJwcm9maWxlIiwiZW52aXJvbm1lbnQiLCJzdWJtaXNzaW9uUmVzcG9uc2UiLCJhY3Rpdml0eSIsInByb2ZpbGVSZWNvcmRzIiwibG9nIiwicHJvZHVjdFBsYXRmb3JtIl0=\")"
                      application/schema+json: "$util.base64Decode(\"WyJpcCIsImFjdGl2aXR5UmVjb3JkcyIsInVzZXJQbGF0Zm9ybSIsImxvZ1JlY29yZHMiLCJwcm9maWxlIiwiZW52aXJvbm1lbnQiLCJzdWJtaXNzaW9uUmVzcG9uc2UiLCJhY3Rpdml0eSIsInByb2ZpbGVSZWNvcmRzIiwibG9nIiwicHJvZHVjdFBsYXRmb3JtIl0=\")"
                      application/x-yaml: "$util.base64Decode(\"LS0tCi0gImlwIgotICJhY3Rpdml0eVJlY29yZHMiCi0gInVzZXJQbGF0Zm9ybSIKLSAibG9nUmVjb3JkcyIKLSAicHJvZmlsZSIKLSAiZW52aXJvbm1lbnQiCi0gInN1Ym1pc3Npb25SZXNwb25zZSIKLSAiYWN0aXZpdHkiCi0gInByb2ZpbGVSZWNvcmRzIgotICJsb2ciCi0gInByb2R1Y3RQbGF0Zm9ybSIK\")"
                      application/yaml: "$util.base64Decode(\"LS0tCi0gImlwIgotICJhY3Rpdml0eVJlY29yZHMiCi0gInVzZXJQbGF0Zm9ybSIKLSAibG9nUmVjb3JkcyIKLSAicHJvZmlsZSIKLSAiZW52aXJvbm1lbnQiCi0gInN1Ym1pc3Npb25SZXNwb25zZSIKLSAiYWN0aXZpdHkiCi0gInByb2ZpbGVSZWNvcmRzIgotICJsb2ciCi0gInByb2R1Y3RQbGF0Zm9ybSIK\")"
                passthroughBehavior: "never"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                  application/schema+json: "{\"statusCode\": 200}"
                  application/x-yaml: "{\"statusCode\": 200}"
                  application/yaml: "{\"statusCode\": 200}"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-apigw-api-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"
            environment:
              title: "environment"
              type: "string"
              description: "the environment"
              enum:
                - "production"
                - "staging"
                - "performance"
                - "load"
                - "qa"
                - "integration"
                - "develop"
                - "monitoring"
                - "demo"
                - "editorial"
            profileRecords:
              required:
                - "records"
              type: "object"
              properties:
                records:
                  maxItems: 500
                  minItems: 1
                  type: "array"
                  items:
                    $ref: "#/components/schemas/profile"
              additionalProperties: false
            activity:
              required:
                - "eventAction"
                - "eventCategory"
                - "eventId"
                - "eventTime"
                - "messageFormatVersion"
                - "messageType"
                - "productEnvironment"
                - "productPlatform"
                - "sessionId"
              type: "object"
              properties:
                userEnvironment:
                  $ref: "#/components/schemas/environment"
                eventDuration:
                  minimum: 0
                  type: "number"
                  description: "If applicable, how long the event took."
                eventCategory:
                  maxLength: 40
                  pattern: "^[\\w-]+$"
                  type: "string"
                eventAction:
                  maxLength: 40
                  pattern: "^[\\w-]+$"
                  type: "string"
                messageFormatVersion:
                  type: "number"
                  enum:
                    - 1
                  default: 1
                tags:
                  maxItems: 15
                  type: "array"
                  description: "An array of custom tags further describing the activity, e.g. activityId or courseKey or courseCGI"
                  items:
                    title: "ActivityTag"
                    required:
                      - "key"
                      - "value"
                    type: "object"
                    properties:
                      key:
                        maxLength: 40
                        pattern: "^[\\w_-]+$"
                        type: "string"
                      value:
                        maxLength: 256
                        pattern: "^[\\w; ,/?:@&=+\\.\\-_!~*'()%]+$"
                        type: "string"
                    additionalProperties: false
                userPlatform:
                  $ref: "#/components/schemas/userPlatform"
                eventId:
                  maxLength: 36
                  pattern: "^[\\w-]+$"
                  type: "string"
                  description: "A unique identifier for this activity record (NOT for the activity the user was viewing)"
                eventUri:
                  maxLength: 2048
                  minLength: 1
                  pattern: "^(([a-zA-Z][0-9a-zA-Z+\\-\\.]*:)?/{0,2}[0-9a-zA-Z;,/?:@&=+\\.\\-_!~*'()%]+)(#[0-9a-zA-Z;,/?:@&=+\\.\\-_!~*'()%]*)?$"
                  type: "string"
                messageType:
                  type: "string"
                  enum:
                    - "ClientEventingActivity"
                  default: "ClientEventingActivity"
                hostPlatform:
                  $ref: "#/components/schemas/productPlatform"
                sessionId:
                  maxLength: 2048
                  pattern: "^[A-Za-z0-9_\\.\\-\\/+=]+$"
                  type: "string"
                eventTime:
                  type: "string"
                  description: "The time of the event, as defined in https://tools.ietf.org/html/rfc3339#section-5.6"
                  format: "date-time"
                hostEnvironment:
                  $ref: "#/components/schemas/environment"
                productEnvironment:
                  $ref: "#/components/schemas/environment"
                userSSOGUID:
                  maxLength: 100
                  minLength: 1
                  pattern: "^[a-zA-Z0-9:\\-{}]{1,255}$"
                  type: "string"
                productPlatform:
                  $ref: "#/components/schemas/productPlatform"
              additionalProperties: false
            log:
              required:
                - "logLevel"
                - "logMessage"
                - "messageFormatVersion"
                - "messageType"
                - "productEnvironment"
                - "productPlatform"
              type: "object"
              properties:
                messageFormatVersion:
                  type: "number"
                  enum:
                    - 1
                  default: 1
                logMessage:
                  maxLength: 20000
                  type: "string"
                  description: "The log message"
                eventUri:
                  maxLength: 255
                  minLength: 1
                  pattern: "^(([a-zA-Z][0-9a-zA-Z+\\-\\.]*:)?/{0,2}[0-9a-zA-Z;,/?:@&=+\\.\\-_!~*'()%]+)(#[0-9a-zA-Z;,/?:@&=+\\.\\-_!~*'()%]*)?$"
                  type: "string"
                messageType:
                  type: "string"
                  enum:
                    - "ClientEventingLog"
                  default: "ClientEventingLog"
                sessionId:
                  maxLength: 2048
                  pattern: "^[A-Za-z0-9_\\.\\-\\/+=]+$"
                  type: "string"
                logTime:
                  type: "string"
                  description: "The time of the event, as defined in https://tools.ietf.org/html/rfc3339#section-5.6"
                  format: "date-time"
                productEnvironment:
                  maxLength: 60
                  pattern: "^[\\w-]+$"
                  type: "string"
                  description: "the environment of the application reporting the event, e.g. staging"
                logLevel:
                  type: "string"
                  enum:
                    - "Error"
                    - "Warn"
                    - "Debug"
                    - "Info"
                  default: "Error"
                productPlatform:
                  $ref: "#/components/schemas/productPlatform"
              additionalProperties: false
            profile:
              required:
                - "eventTime"
                - "messageFormatVersion"
                - "messageType"
                - "productEnvironment"
                - "productPlatform"
                - "sessionId"
              type: "object"
              properties:
                location:
                  title: "GeoLocation"
                  type: "object"
                  properties:
                    city:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    ipAddressFailure:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    latitude:
                      maximum: 90
                      minimum: -90
                      type: "number"
                    accuracy:
                      maximum: 2147483647
                      minimum: -2147483648
                      type: "number"
                    country:
                      maxLength: 10
                      pattern: "^[\\(\\) A-Za-z-]{1,10}$"
                      type: "string"
                    serviceProvider:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    longitude:
                      maximum: 180
                      minimum: -180
                      type: "number"
                    ipAddress:
                      anyOf:
                        - type: "string"
                          format: "ipv4"
                        - type: "string"
                          format: "ipv6"
                    locationFailure:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    latLongFailure:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    timeZone:
                      maxLength: 64
                      pattern: "^[\\w:. _/+-]{1,64}$"
                      type: "string"
                  additionalProperties: false
                messageFormatVersion:
                  type: "number"
                  enum:
                    - 1
                  default: 1
                messageType:
                  type: "string"
                  enum:
                    - "ClientEventingProfile"
                  default: "ClientEventingProfile"
                hostPlatform:
                  $ref: "#/components/schemas/productPlatform"
                sessionId:
                  maxLength: 2048
                  pattern: "^[A-Za-z0-9_\\.\\-\\/+=]+$"
                  type: "string"
                eventTime:
                  type: "string"
                  description: "The time of the event, as defined in https://tools.ietf.org/html/rfc3339#section-5.6"
                  format: "date-time"
                platform:
                  title: "Platform"
                  type: "object"
                  properties:
                    platformType:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    engineName:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    osVersionName:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    browserVersion:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    screenResolution:
                      title: "ScreenResolution"
                      required:
                        - "height"
                        - "width"
                      type: "object"
                      properties:
                        width:
                          maximum: 2147483647
                          minimum: 0
                          type: "number"
                        height:
                          maximum: 2147483647
                          minimum: 0
                          type: "number"
                      additionalProperties: false
                    browserName:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    language:
                      maxLength: 10
                      pattern: "^[\\(\\) A-Za-z-]{1,10}$"
                      type: "string"
                    browserFingerprint:
                      maxLength: 64
                      pattern: "^[0-9a-f]+$"
                      type: "string"
                    osName:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    osVersion:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    platformVendor:
                      maxLength: 64
                      pattern: "^[\\w:. _-]{1,64}$"
                      type: "string"
                    userAgentString:
                      maxLength: 4096
                      type: "string"
                  additionalProperties: false
                hostEnvironment:
                  $ref: "#/components/schemas/environment"
                productEnvironment:
                  $ref: "#/components/schemas/environment"
                productPlatform:
                  $ref: "#/components/schemas/productPlatform"
              additionalProperties: false
            activityRecords:
              required:
                - "records"
              type: "object"
              properties:
                records:
                  maxItems: 500
                  minItems: 1
                  type: "array"
                  items:
                    $ref: "#/components/schemas/activity"
              additionalProperties: false
            logRecords:
              required:
                - "records"
              type: "object"
              properties:
                records:
                  maxItems: 500
                  minItems: 1
                  type: "array"
                  items:
                    $ref: "#/components/schemas/log"
              additionalProperties: false
            productPlatform:
              type: "string"
              description: "the application name reporting the event, e.g. MindTap"
              title: "ProductPlatform"
              enum:
                - "login"
                - "profile"
                - "dashboard"
                - "cart"
                - "catalog"
                - "admin"
                - "analytics"
                - "analytics-portal"
            userPlatform:
              type: "string"
              description: "the system defining the user record"
              title: "UserPlatform"
              enum:
                - "sso"
          securitySchemes:
            api_key:
              type: "apiKey"
              name: "x-api-key"
              in: "header"
        x-amazon-apigateway-minimum-compression-size: 0

